--
-- Script was generated by Devart dbForge Studio for MySQL, Version 6.3.358.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2/9/2016 10:17:02 AM
-- Server version: 5.6.24
-- Client version: 4.1
--


--
-- Definition for database sadrrepository
--
DROP DATABASE IF EXISTS sadrrepository;
CREATE DATABASE IF NOT EXISTS sadrrepository
	CHARACTER SET utf8
	COLLATE utf8_general_ci;

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- 
-- Set default database
--
USE sadrrepository;

--
-- Definition for table tblaccess
--
CREATE TABLE IF NOT EXISTS tblaccess (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  Access VARCHAR(50) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB
AUTO_INCREMENT = 9
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblandroidversion
--
CREATE TABLE IF NOT EXISTS tblandroidversion (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  Version VARCHAR(255) NOT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB
AUTO_INCREMENT = 5
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblcategory
--
CREATE TABLE IF NOT EXISTS tblcategory (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  MainCategoryID INT(10) UNSIGNED NOT NULL,
  Name VARCHAR(45) DEFAULT NULL,
  PRIMARY KEY (ID),
  INDEX fk_tbCategory_tbMainCategory1_idx (MainCategoryID)
)
ENGINE = INNODB
AUTO_INCREMENT = 5
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblcontent
--
CREATE TABLE IF NOT EXISTS tblcontent (
  ID INT(11) NOT NULL AUTO_INCREMENT,
  Title VARCHAR(255) DEFAULT NULL,
  Context VARCHAR(10000) DEFAULT NULL,
  Type VARCHAR(255) DEFAULT NULL,
  UserID INT(10) NOT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tbldeveloper
--
CREATE TABLE IF NOT EXISTS tbldeveloper (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  UserName VARCHAR(45) NOT NULL,
  Email VARCHAR(45) DEFAULT NULL,
  Password VARCHAR(200) NOT NULL,
  IsCooperation BIT(1) DEFAULT b'0',
  DisplayName VARCHAR(45) DEFAULT NULL,
  Name VARCHAR(45) DEFAULT NULL,
  Family VARCHAR(45) DEFAULT NULL,
  Tel CHAR(11) DEFAULT NULL,
  Mobile CHAR(11) DEFAULT NULL,
  WebSite VARCHAR(80) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB
AUTO_INCREMENT = 31
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblgroup
--
CREATE TABLE IF NOT EXISTS tblgroup (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  GroupName VARCHAR(45) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB
AUTO_INCREMENT = 6
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblimage
--
CREATE TABLE IF NOT EXISTS tblimage (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  VersionID INT(10) UNSIGNED NOT NULL,
  ImagePath VARCHAR(800) DEFAULT NULL,
  PRIMARY KEY (ID),
  INDEX fk_tbImage_tbVersion1_idx (VersionID)
)
ENGINE = INNODB
AUTO_INCREMENT = 1004
AVG_ROW_LENGTH = 1170
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblmaincategory
--
CREATE TABLE IF NOT EXISTS tblmaincategory (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  Name VARCHAR(45) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB
AUTO_INCREMENT = 3
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblmark
--
CREATE TABLE IF NOT EXISTS tblmark (
  UserID INT(10) UNSIGNED NOT NULL,
  UpdatedAppID INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (UserID, UpdatedAppID),
  INDEX fk_tbUser_has_tbUpdatedApp_tbUpdatedApp1_idx (UpdatedAppID),
  INDEX fk_tbUser_has_tbUpdatedApp_tbUser1_idx (UserID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2730
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblmessage
--
CREATE TABLE IF NOT EXISTS tblmessage (
  ID INT(10) UNSIGNED NOT NULL,
  EnTitle VARCHAR(255) NOT NULL,
  FaTitle VARCHAR(255) DEFAULT NULL,
  Description VARCHAR(2000) DEFAULT NULL,
  PRIMARY KEY (ID),
  UNIQUE INDEX EnTitle (EnTitle)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2048
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblmethodparam
--
CREATE TABLE IF NOT EXISTS tblmethodparam (
  ID INT(10) NOT NULL AUTO_INCREMENT,
  Name VARCHAR(50) NOT NULL,
  MethodID INT(10) UNSIGNED NOT NULL,
  Type VARCHAR(20) DEFAULT NULL,
  Description VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (ID),
  INDEX FK_tblparam_tblservicemethod_ID (MethodID),
  INDEX ID (ID)
)
ENGINE = INNODB
AUTO_INCREMENT = 46
AVG_ROW_LENGTH = 1489
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblrelatedapp
--
CREATE TABLE IF NOT EXISTS tblrelatedapp (
  UpdatedAppID INT(10) UNSIGNED NOT NULL,
  RelatedUpdatedAppID INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (UpdatedAppID, RelatedUpdatedAppID),
  INDEX fk_tbUpdatedApp_has_tbUpdatedApp_tbUpdatedApp1_idx (UpdatedAppID),
  INDEX fk_tbUpdatedApp_has_tbUpdatedApp_tbUpdatedApp2_idx (RelatedUpdatedAppID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblservicemethod
--
CREATE TABLE IF NOT EXISTS tblservicemethod (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  MethodName VARCHAR(100) NOT NULL,
  ReturnType VARCHAR(20) DEFAULT NULL,
  Description VARCHAR(2000) DEFAULT NULL,
  InnerMethod BIT(1) NOT NULL DEFAULT b'1',
  PRIMARY KEY (ID),
  UNIQUE INDEX MethodName (MethodName)
)
ENGINE = INNODB
AUTO_INCREMENT = 33
AVG_ROW_LENGTH = 910
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblservicemethodgroup
--
CREATE TABLE IF NOT EXISTS tblservicemethodgroup (
  GroupID INT(10) UNSIGNED NOT NULL,
  ServiceMethodID INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (GroupID, ServiceMethodID),
  INDEX fk_tbServiceMethodGroup_tbGroup1_idx (GroupID),
  INDEX fk_tbServiceMethodGroup_tbServiceMethod1_idx (ServiceMethodID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 862
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tbltag
--
CREATE TABLE IF NOT EXISTS tbltag (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  UpdatedAppID INT(10) UNSIGNED NOT NULL,
  Tag VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (ID),
  INDEX fk_tbTag_tbUpdatedApp1_idx (UpdatedAppID)
)
ENGINE = INNODB
AUTO_INCREMENT = 1
AVG_ROW_LENGTH = 2730
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblupdatedapp
--
CREATE TABLE IF NOT EXISTS tblupdatedapp (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  AppName VARCHAR(250) NOT NULL,
  DeveloperID INT(10) UNSIGNED NOT NULL,
  CategoryID INT(10) UNSIGNED NOT NULL,
  Installs INT(10) UNSIGNED ZEROFILL DEFAULT NULL,
  Description VARCHAR(20000) DEFAULT NULL,
  Score1 INT(1) UNSIGNED DEFAULT 0,
  Score2 INT(4) UNSIGNED DEFAULT 0,
  Score3 INT(4) UNSIGNED DEFAULT 0,
  Score4 INT(4) UNSIGNED DEFAULT 0,
  Score5 INT(4) UNSIGNED DEFAULT 0,
  Package VARCHAR(255) NOT NULL,
  PRIMARY KEY (ID),
  INDEX fk_tbUpdatedApp_tbCategory1_idx (CategoryID),
  INDEX fk_tbUpdatedApp_tbDeveloper1_idx (DeveloperID)
)
ENGINE = INNODB
AUTO_INCREMENT = 110
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblupdatedappcomment
--
CREATE TABLE IF NOT EXISTS tblupdatedappcomment (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  UpdatedAppID INT(10) UNSIGNED NOT NULL,
  UserID INT(10) UNSIGNED NOT NULL,
  Publishable BIT(1) NOT NULL DEFAULT b'0',
  Comment VARCHAR(255) DEFAULT NULL,
  Date VARCHAR(10) DEFAULT NULL,
  PRIMARY KEY (ID),
  INDEX fk_tbUpdatedApp_has_tbUser_tbUpdatedApp1_idx (UpdatedAppID),
  INDEX fk_tbUpdatedApp_has_tbUser_tbUser1_idx (UserID)
)
ENGINE = INNODB
AUTO_INCREMENT = 31
AVG_ROW_LENGTH = 1092
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblupdatedappgroup
--
CREATE TABLE IF NOT EXISTS tblupdatedappgroup (
  UpdatedAppID INT(10) UNSIGNED NOT NULL,
  GroupID INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (UpdatedAppID, GroupID),
  INDEX fk_tbUpdatedApp_has_tbGroup_tbGroup1_idx (GroupID),
  INDEX fk_tbUpdatedApp_has_tbGroup_tbUpdatedApp1_idx (UpdatedAppID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1820
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblupdatedapprate
--
CREATE TABLE IF NOT EXISTS tblupdatedapprate (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  UpdatedAppID INT(10) DEFAULT NULL,
  UserID INT(10) DEFAULT NULL,
  Rate TINYINT(1) NOT NULL,
  PRIMARY KEY (ID),
  INDEX FK_tblupdatedapprate_tblupdatedapprate_ID (UserID)
)
ENGINE = INNODB
AUTO_INCREMENT = 13
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tbluser
--
CREATE TABLE IF NOT EXISTS tbluser (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  Name VARCHAR(100) DEFAULT NULL,
  Email VARCHAR(45) DEFAULT NULL,
  Password VARCHAR(200) DEFAULT NULL,
  Sex CHAR(1) DEFAULT 'M',
  CreateDate CHAR(10) DEFAULT NULL,
  UserName VARCHAR(100) NOT NULL,
  Mobile CHAR(11) DEFAULT NULL,
  PRIMARY KEY (ID),
  UNIQUE INDEX UserName (UserName)
)
ENGINE = INNODB
AUTO_INCREMENT = 65
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblusergroup
--
CREATE TABLE IF NOT EXISTS tblusergroup (
  UserID INT(10) UNSIGNED NOT NULL,
  GroupID INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (UserID, GroupID),
  INDEX fk_tbUserGroup_tbGroup1_idx (GroupID),
  INDEX fk_tbUserGroup_tbUser1_idx (UserID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2730
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblversion
--
CREATE TABLE IF NOT EXISTS tblversion (
  ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  UpdatedAppID INT(10) UNSIGNED DEFAULT NULL,
  Version VARCHAR(50) NOT NULL,
  Size VARCHAR(45) DEFAULT NULL,
  PublishDate CHAR(10) DEFAULT NULL,
  Changes VARCHAR(8000) DEFAULT NULL,
  IconPath VARCHAR(800) DEFAULT NULL,
  AppPath VARCHAR(800) NOT NULL,
  IsUpdatedVersion BIT(1) DEFAULT b'1',
  AndroidVersionID INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (ID),
  INDEX FK_tblversion_tblupdatedapp_ID (UpdatedAppID),
  INDEX FK_tbversion_tbandroidversion_ID (AndroidVersionID)
)
ENGINE = INNODB
AUTO_INCREMENT = 110
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tblversionaccess
--
CREATE TABLE IF NOT EXISTS tblversionaccess (
  VersionID INT(10) UNSIGNED NOT NULL,
  AccessID INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (VersionID, AccessID),
  INDEX fk_tbVersion_has_tbAccess_tbAccess1_idx (AccessID),
  INDEX fk_tbVersion_has_tbAccess_tbVersion_idx (VersionID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2048
CHARACTER SET utf8
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Definition for procedure AppListByCat
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE AppListByCat(IN `UserID` INT)
proc:
  BEGIN
    DECLARE CategoryID int DEFAULT 0;
    DECLARE Page int DEFAULT 0;
    DECLARE offs int;
    
    SELECT
      ParamValue INTO CategoryID
    FROM tbtempParam
    WHERE ParamName = "CatID";
    IF CategoryID = 0 THEN
      CALL getMessage("Invalid parameters");
      LEAVE proc;
    END IF;

    SELECT
      ParamValue INTO Page
    FROM tbtempParam
    WHERE ParamName = "Page";
    SET offs = Page * 11;

    SELECT
      "AppListByCat" AS 'info';
    SELECT DISTINCT
      tblUpdatedApp.ID as AppID,
	  tblUpdatedApp.AppName,
      tblUpdatedApp.Installs,
      tblUpdatedApp.Description,
      tblDeveloper.DisplayName,
      tblVersion.Version,
      tblVersion.Size,
      tblVersion.PublishDate,
      tblVersion.Changes,
      tblVersion.IconPath,
      tblVersion.AppPath,
      tblUpdatedApp.Score1,
      tblUpdatedApp.Score2,
      tblUpdatedApp.Score3,
      tblUpdatedApp.Score4,
      tblUpdatedApp.Score5,
      tblUpdatedApp.Package
    FROM tblUpdatedApp
      INNER JOIN tblDeveloper
        ON tblUpdatedApp.DeveloperID = tblDeveloper.ID
      INNER JOIN tblVersion
        ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
        AND tblVersion.IsUpdatedVersion <> 0
      INNER JOIN tblCategory
        ON tblUpdatedApp.CategoryID = tblCategory.ID
        AND tblCategory.ID = CategoryID
      INNER JOIN tblUpdatedAppGroup
        ON tblUpdatedApp.ID = tblUpdatedAppGroup.UpdatedAppID
      INNER JOIN tblGroup
        ON tblUpdatedAppGroup.GroupID = tblGroup.ID
      INNER JOIN tblUserGroup
        ON tblGroup.ID = tblUserGroup.GroupID
        AND tblUserGroup.UserID = UserID
		ORDER BY tblVersion.ID DESC
		LIMIT 11 OFFSET offs;
    CALL getMessage("Successful");
  END
$$

--
-- Definition for procedure CallMethod
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE CallMethod(IN `MethodName` VARCHAR(255), IN `UserName` VARCHAR(255), IN `Parameters` TEXT)
proc:BEGIN
  DECLARE UserID int  DEFAULT 0;
  DECLARE MethodID int DEFAULT 0;
  DECLARE HasAccess int DEFAULT 0;
  DECLARE i int DEFAULT 1;
  -- check not call inner method

  IF (SELECT InnerMethod from tblServiceMethod t WHERE t.MethodName = MethodName) = 1 then
    CALL getMessage("Inner method not allowed");
    LEAVE proc;
  end if;
  
  -- get UserID
  SELECT ID INTO UserID from tblUser t WHERE t.UserName = UserName;
  IF (UserID) = 0 then
    CALL getMessage("Incorrect user name");
    LEAVE proc;
  end if;

  -- get MethodID
   SELECT ID INTO MethodID from tblServiceMethod t WHERE t.MethodName = MethodName;
   IF (MethodID) = 0 then
    CALL getMessage("Method not exists");
    LEAVE proc;
   end if;

  CALL HasMethodAccess(MethodID,UserID,HasAccess);
  IF HasAccess = 0 THEN
    CALL getMessage("Method not allowed");
    LEAVE proc;
  END IF;

  CALL ParamParser(Parameters,'|','=');
  CASE MethodName
    WHEN "FullAppRetrieve"          THEN CALL FullAppRetrieve(UserID);
    WHEN "OuterMethodList"          THEN CALL OuterMethodList(UserID);
    WHEN "SearchAppByName"          THEN CALL SearchAppByName(UserID);
    WHEN "AppListByCat"             THEN CALL AppListByCat(UserID); 
    WHEN "GetDeveloperByID"         THEN CALL GetDeveloperByID();
    WHEN "GetVersionByUpdatedAppID" THEN CALL GetVersionByUpdatedAppID(UserID);
    WHEN "GetCategoryList"          THEN CALL GetCategoryList();
    WHEN "GetUserInfo"              THEN CALL GetUserInfo(UserID);
    WHEN "GetUserMarkedApps"        THEN CALL GetUserMarkedApps(UserID);
    WHEN "GetContentByTitle"        THEN CALL GetContentByTitle();
    WHEN "InsertComment"            THEN CALL InsertComment(UserID);
    WHEN "InsertUpdateRate"         THEN CALL InsertUpdateRate(UserID);
    WHEN "GrantUserGroup"           THEN CALL GrantUserGroup();
    WHEN "GrantGroupMethod"         THEN CALL GrantGroupMethod();
    WHEN "GrantGroupApp"            THEN CALL GrantGroupApp();
    WHEN "RevokeUserGroup"          THEN CALL RevokeUserGroup();
    WHEN "RevokeGroupMethod"        THEN CALL RevokeGroupMethod();
    WHEN "RevokeGroupApp"           THEN CALL RevokeGroupApp();
    WHEN "SignUp"                   THEN CALL SignUp();
	  WHEN "SearchAppInfo"            THEN CALL SearchAppInfo(UserID);
	  WHEN "GetCommentsByAppID"       THEN CALL GetCommentsByAppID(UserID);
	  WHEN "ToggleAppMark"			      THEN CALL ToggleAppMark(UserID);
	  WHEN "UpdateUserInfo"           THEN CALL UpdateUserInfo(UserID);
	  WHEN "GetAppUpdateList"         THEN CALL GetAppUpdateList(UserID);
    WHEN "GetAppListByPopularity"   THEN CALL GetAppListByPopularity(UserID);
                                    ELSE CALL getMessage("Unknown error");
  END CASE;

END
$$

--
-- Definition for procedure FullAppRetrieve
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE FullAppRetrieve(IN `UserID` INT)
proc:
BEGIN
    DECLARE HasAccessToMethod int DEFAULT 0;
    DECLARE tmpDeveloperID int DEFAULT 0;
    DECLARE HasAccess int DEFAULT 0;
    DECLARE AppID int;
    DECLARE info nvarchar(100);
    -- restrict if User doesnt access to app
    SELECT
      ParamValue INTO AppID
    FROM tbtempParam
    WHERE ParamName = "AppID";
    CALL HasAppAccess(AppID, UserID, HasAccess);
    IF HasAccess = 0 THEN
      CALL getMessage("App not allowed");
      LEAVE proc;
    ELSE

      -- main App Data, one-by-one data
      SET info = "MainAppData";
      SELECT
        info;
      SELECT
        tblUpdatedApp.AppName,
        tblUpdatedApp.Installs,
        tblUpdatedApp.Description,
        tblDeveloper.DisplayName,
        tblVersion.Version,
        tblVersion.Size,
        tblVersion.PublishDate,
        tblVersion.Changes,
        tblVersion.IconPath,
        tblVersion.AppPath,
        tblUpdatedApp.Score1,
        tblUpdatedApp.Score2,
        tblUpdatedApp.Score3,
        tblUpdatedApp.Score4,
        tblUpdatedApp.Score5,
        tblUpdatedApp.Package,
		tblCategory.Name as CatName
      FROM tblUpdatedApp
        INNER JOIN tblDeveloper
          ON tblUpdatedApp.DeveloperID = tblDeveloper.ID
          AND tblUpdatedApp.ID = AppID
        INNER JOIN tblVersion
          ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
          AND tblVersion.IsUpdatedVersion <> 0
        INNER JOIN tblCategory
          ON tblUpdatedApp.CategoryID = tblCategory.ID;

      -- application access list
      SET info = "AccessList";
      SELECT
        info;
      SELECT
        tblAccess.Access,
        tblAccess.Description
      FROM tblAccess
        INNER JOIN tblVersionAccess
          ON tblAccess.ID = tblVersionAccess.AccessID
        INNER JOIN tblVersion
          ON tblVersionAccess.VersionID = tblVersion.ID
          AND IsUpdatedVersion <> 0
        INNER JOIN tblUpdatedApp
          ON tblVersion.UpdatedAppID = tblUpdatedApp.ID
          AND tblUpdatedApp.ID = AppID;

      -- image paths
      SET info = "ImagePaths";
      SELECT
        info;
      SELECT
        tblImage.ImagePath
      FROM tblImage
        INNER JOIN tblVersion
          ON tblImage.VersionID = tblVersion.ID
        INNER JOIN tblUpdatedApp
          ON tblVersion.UpdatedAppID = tblUpdatedApp.ID
          AND tblUpdatedApp.ID = AppID
          AND tblVersion.IsUpdatedVersion <> 0;

      -- related App
      SET info = "RelatedApps";
      SELECT
        info;
      SELECT
        tblUpdatedApp.ID,
        tblUpdatedApp.AppName,
        tblUpdatedApp.Package,
        tblVersion.IconPath
      FROM tblUpdatedApp
        INNER JOIN tblVersion
          ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
          AND tblUpdatedApp.ID <> AppID
          AND tblVersion.IsUpdatedVersion <> 0
        INNER JOIN tblRelatedApp
          ON tblUpdatedApp.ID = tblRelatedApp.RelatedUpdatedAppID
          AND tblRelatedApp.UpdatedAppID = AppID;
		
	  -- Developer Info
	  SET info = "DeveloperInfo";
      SELECT info;
      SELECT t.ID as DeveloperID, t.UserName, t.Email, t.IsCooperation, t.DisplayName,
        t.Name, t.Family, t.Tel, t.Mobile, t.WebSite FROM tblDeveloper t
      INNER JOIN tblUpdatedApp ON t.ID = tblUpdatedApp.DeveloperID AND
         tblUpdatedApp.ID = AppID;
      
      -- Developer other Apps
      SET info = "DeveloperOtherApps";
      SELECT
        info;
      SELECT
        tblUpdatedApp.DeveloperID INTO tmpDeveloperID
      FROM tblUpdatedApp
      WHERE tblUpdatedApp.ID = AppID;
      SELECT
        tblUpdatedApp.ID,
        tblUpdatedApp.AppName,
        tblVersion.IconPath,
        tblUpdatedApp.Package
      FROM tblUpdatedApp
        INNER JOIN tblVersion
          ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
          AND tblUpdatedApp.DeveloperID = tmpDeveloperID
          AND tblUpdatedApp.ID <> AppID
          AND tblVersion.IsUpdatedVersion <> 0;

      -- app tags
      SET info = "AppTags";
      SELECT
        info;
      SELECT
        tblTag.Tag
      FROM tblTag
        INNER JOIN tblUpdatedApp
          ON tblTag.UpdatedAppID = tblUpdatedApp.ID
      WHERE tblUpdatedApp.ID = AppID;

      -- comments
      SET info = "Comments";
      SELECT
        info;
      SELECT
        tblUpdatedAppComment.Publishable,
        tblUpdatedAppComment.Date,
        tblUpdatedAppComment.Comment,
        tblUser.Name
      FROM tblUpdatedAppComment
        INNER JOIN tblUser
          ON tblUpdatedAppComment.UserID = tblUser.ID
        INNER JOIN tblUpdatedApp
          ON tblUpdatedAppComment.UpdatedAppID = tblUpdatedApp.ID
          AND tblUpdatedAppComment.UpdatedAppID = AppID;
		-- MarkState
		SELECT "MarkState" AS info;
      SELECT 'Marked' as MarkStatus FROM tblMark t WHERE t.UserID = UserID AND t.UpdatedAppID = AppID;
	  -- get User Rate 
      SELECT "UserRate" AS info;
      SELECT Rate FROM tblUpdatedAppRate t WHERE t.UpdatedAppID = AppID AND t.UserID = UserID;

    -- get Other Versions
    SELECT "OtherVersions" AS info;
    SELECT t.ID,t.Version,t.Size,t.PublishDate,t.Changes,t.IconPath,t.AppPath,t.AndroidVersionID FROM tblVersion t
    INNER JOIN tblAndroidVersion t1 ON t.ID = t1.ID WHERE t.UpdatedAppID = AppID AND t.IsUpdatedVersion=0;

    END IF;
    CALL getMessage("Successful");
  END
$$

--
-- Definition for procedure GetAppListByPopularity
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetAppListByPopularity(IN `UserID` INT)
proc:
  BEGIN
    DECLARE Page int DEFAULT 0;
    DECLARE offs int;

    SELECT
      ParamValue INTO Page
    FROM tbtempParam
    WHERE ParamName = "Page";
    SET offs = Page * 11;

    SELECT
      "AppListByPopularity" AS 'info';
    SELECT DISTINCT
      t.ID as "AppID",
	  t.AppName,
      t.Installs,
      t.Description,
      tblDeveloper.DisplayName,
      tblVersion.Version,
      tblVersion.Size,
      tblVersion.PublishDate,
      tblVersion.Changes,
      tblVersion.IconPath,
      tblVersion.AppPath,
      t.Score1,
      t.Score2,
      t.Score3,
      t.Score4,
      t.Score5,
      t.Package,
      (t.Score1 * 1 + t.Score2 * 2 + t.Score3 * 3 + t.Score4 * 4 + t.Score5 * 5) / (t.Score1 + t.Score2 + t.Score3 + t.Score4 + t.Score5) AS OvreallScore
    FROM tblUpdatedApp t
      INNER JOIN tblDeveloper
        ON t.DeveloperID = tblDeveloper.ID
      INNER JOIN tblVersion
        ON t.ID = tblVersion.UpdatedAppID
        AND tblVersion.IsUpdatedVersion <> 0
      INNER JOIN tblUpdatedAppGroup
        ON t.ID = tblUpdatedAppGroup.UpdatedAppID
      INNER JOIN tblGroup
        ON tblUpdatedAppGroup.GroupID = tblGroup.ID
      INNER JOIN tblUserGroup
        ON tblGroup.ID = tblUserGroup.GroupID
        AND tblUserGroup.UserID = UserID
    ORDER BY OvreallScore DESC
    LIMIT 11 OFFSET offs;
    CALL getMessage("Successful");
  END
$$

--
-- Definition for procedure GetAppUpdateList
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetAppUpdateList(IN `UserID` INT)
BEGIN
  DECLARE HasAccess int;
  DECLARE Packages text;
  DECLARE AppID int;
  DECLARE tempPackage, tempVersion varchar(255);
  DECLARE NumApps int;
  DECLARE i int DEFAULT 1;
  SELECT ParamValue INTO Packages FROM tbtempParam WHERE ParamName = "Packages";

  CREATE TEMPORARY TABLE IF NOT EXISTS tbtempApp (AppID int(10),
    AppName varchar(255), Installs int(10), Description varchar(8000)
    ,DisPlayName varchar(45), Version varchar(50), Size varchar(45), PublishDate char(8),
    Changes varchar(8000), IconPath varchar(800), AppPath varchar(800), Score1 int(4), Score2 int(4), Score3 int(4) ,Score4 int(4) ,Score5 int(4)
    ,Package varchar(255));

  WHILE LENGTH(Packages)>0 DO
    SET tempPackage = SUBSTRING_INDEX(Packages,';',1);
    SET tempVersion = SUBSTR(tempPackage,LENGTH(SUBSTRING_INDEX(tempPackage,',',1))+2);
    SET tempPackage = SUBSTRING_INDEX(tempPackage,',',1);
    SET Packages = SUBSTR(Packages,LENGTH(SUBSTRING_INDEX(Packages,';',1))+2);
    SELECT ID INTO AppID FROM tblUpdatedApp t WHERE t.Package = tempPackage;

    SET HasAccess = 0;
    CALL HasAppAccess(AppID,UserID,HasAccess);

    IF HasAccess <> 0 THEN
        INSERT INTO tbtempApp(SELECT DISTINCT
      tblUpdatedApp.ID AS AppID,
      tblUpdatedApp.AppName,
      tblUpdatedApp.Installs,
      tblUpdatedApp.Description,
      tblDeveloper.DisplayName,
      tblVersion.Version,
      tblVersion.Size,
      tblVersion.PublishDate,
      tblVersion.Changes,
      tblVersion.IconPath,
      tblVersion.AppPath,
      tblUpdatedApp.Score1,
      tblUpdatedApp.Score2,
      tblUpdatedApp.Score3,
      tblUpdatedApp.Score4,
      tblUpdatedApp.Score5,
      tblUpdatedApp.Package 
    FROM tblUpdatedApp 
      INNER JOIN tblDeveloper
        ON tblUpdatedApp.DeveloperID = tblDeveloper.ID AND tblUpdatedApp.Package = tempPackage
      INNER JOIN tblVersion
        ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
        AND tblVersion.IsUpdatedVersion <> 0 AND tblVersion.Version > tempVersion 
      ORDER BY tblVersion.Version DESC
        LIMIT 1 OFFSET 0);
    END IF;  
  end while;
  SELECT "UpdateAppList" AS info;
  SELECT * FROM tbtempApp;
  CALL GetMessage("Successful");
END
$$

--
-- Definition for procedure GetCategoryList
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetCategoryList()
proc:BEGIN

    DECLARE MainCatID int DEFAULT 0;
    SELECT
      ParamValue INTO MainCatID
    FROM tbtempParam
    WHERE ParamName = "MainCatID";
    IF MainCatID = 0
    THEN
      CALL getMessage("Invalid parameters");
      LEAVE proc;
    END IF;
  SELECT "CategoryList" AS 'info';
    SELECT
      t.ID as 'CategoryID', t.Name
    FROM tblCategory t
    WHERE t.MainCategoryID = MainCatID;
    CALL GetMessage("Successful");

END
$$

--
-- Definition for procedure GetCommentsByAppID
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetCommentsByAppID(IN `UserID` INT)
proc:BEGIN
  DECLARE HasAccess int DEFAULT 0;
  DECLARE info nvarchar(255);
  DECLARE AppID int(10);
SELECT ParamValue INTO AppID FROM tbtempParam WHERE ParamName = "AppID";
  CALL HasAppAccess(AppID,UserID,HasAccess);
IF HasAccess = 0 THEN
  CALL getMessage("App not allowed");
  LEAVE proc;
END IF;  

      -- comments
      SET info = "Comments";
      SELECT
        info;
      SELECT
        tblUpdatedAppComment.Publishable,
        tblUpdatedAppComment.Date commentDate,
        tblUpdatedAppComment.Comment,
        tblUpdatedAppRate.Rate,
        tblUser.Name NameOfUser,
        tblUser.Sex,
        tblUser.UserName,
        tblUser.ID AS UserID
      FROM tblUpdatedAppComment
        INNER JOIN tblUpdatedApp
          ON tblUpdatedAppComment.UpdatedAppID = tblUpdatedApp.ID
          AND tblUpdatedAppComment.UpdatedAppID = AppID
        INNER JOIN tblUpdatedAppRate ON tblUpdatedApp.ID = tblUpdatedAppRate.UpdatedAppID
        INNER JOIN tblUser ON tblUser.ID = tblUpdatedAppComment.UserID
        AND tblUser.ID = tblUpdatedAppRate.UserID;
    CALL getMessage("Successful");
END
$$

--
-- Definition for procedure GetContentByTitle
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetContentByTitle()
proc:BEGIN
DECLARE ContentTitle nvarchar(50) DEFAULT '';
    SELECT
      ParamValue INTO ContentTitle
    FROM tbtempParam
    WHERE ParamName = "ContentTitle";
    IF ContentTitle = ''
    THEN
      CALL getMessage("Invalid parameters");
      LEAVE proc;
    END IF;
select ContentTitle;
  SELECT 'Content' AS 'info';
  SELECT t.ID, t.Title, t.Context, t.Type, t1.UserName FROM tblContent t
    INNER JOIN tblUser t1 ON t.UserID = t1.ID WHERE t.Title = ContentTitle;
  CALL GetMessage("Successful");
END
$$

--
-- Definition for procedure GetDeveloperByID
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetDeveloperByID()
proc:
  BEGIN
    DECLARE DeveloperID int DEFAULT 0;
    SELECT
      ParamValue INTO DeveloperID
    FROM tbtempParam
    WHERE ParamName = "DeveloperID";
    IF DeveloperID = 0
    THEN
      CALL getMessage("Invalid parameters");
      LEAVE proc;
    END IF;
  SELECT "DeveloperInfo" AS 'info';
    SELECT
      *
    FROM tblDeveloper
    WHERE tblDeveloper.ID = DeveloperID;
    CALL GetMessage("Successful");
  END
$$

--
-- Definition for procedure GetMessage
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetMessage(IN MessageTitle varchar(255))
BEGIN
  SELECT "Message" AS info;
SELECT * FROM tblMessage WHERE EnTitle = MessageTitle;
END
$$

--
-- Definition for procedure GetUserInfo
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetUserInfo(IN `UserID` INT)
proc:BEGIN
  SELECT "UserInfo" AS 'info';
    SELECT ID AS 'UserID',Name,Mobile,Email,Sex
      ,CreateDate,UserName FROM tblUser t WHERE t.ID = UserID;
    CALL GetMessage("Successful");

END
$$

--
-- Definition for procedure GetUserMarkedApps
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetUserMarkedApps(IN `UserID` INT)
BEGIN
  SELECT
    "UserMarkedApps" AS 'info';
  SELECT DISTINCT
    tblUpdatedApp.ID AS 'UpdateAppID',
    tblUpdatedApp.AppName,
    tblUpdatedApp.Installs,
    tblUpdatedApp.Description,
    tblDeveloper.DisplayName,
    tblVersion.Version,
    tblVersion.Size,
    tblVersion.PublishDate,
    tblVersion.Changes,
    tblVersion.IconPath,
    tblVersion.AppPath,
    tblUpdatedApp.Score1,
    tblUpdatedApp.Score2,
    tblUpdatedApp.Score3,
    tblUpdatedApp.Score4,
    tblUpdatedApp.Score5,
    tblUpdatedApp.Package
  FROM tblUpdatedApp
    INNER JOIN tblDeveloper
      ON tblUpdatedApp.DeveloperID = tblDeveloper.ID
    INNER JOIN tblVersion
      ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
      AND tblVersion.IsUpdatedVersion <> 0
    INNER JOIN tblUpdatedAppGroup
      ON tblUpdatedApp.ID = tblUpdatedAppGroup.UpdatedAppID
    INNER JOIN tblGroup
      ON tblUpdatedAppGroup.GroupID = tblGroup.ID
    INNER JOIN tblUserGroup
      ON tblGroup.ID = tblUserGroup.GroupID
      AND tblUserGroup.UserID = UserID
    INNER JOIN tblMark
      ON tblUpdatedApp.ID = tblMark.UpdatedAppID
      AND tblMark.UserID = UserID;
  CALL getMessage("Successful");
END
$$

--
-- Definition for procedure GetVersionByUpdatedAppID
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetVersionByUpdatedAppID(IN `UserID` INT)
proc:
  BEGIN
    DECLARE UpdatedAppID int DEFAULT 0;
    SELECT
      ParamValue INTO UpdatedAppID
    FROM tbtempParam
    WHERE ParamName = "UpdatedAppID";
    IF UpdatedAppID = 0 THEN
      CALL getMessage("Invalid parameters");
      LEAVE proc;
    END IF;
    SELECT
      "VersionByUpdatedAppID" AS 'info';
    SELECT distinct
      tblVersion.ID AS 'VersionID',
      tblVersion.Version AS 'AppVerison',
      Size,
      PublishDate,
      Changes,
      IconPath,
      AppPath,
      tblAndroidVersion.Version AS 'AndroidVersion',
      IsUpdatedVersion
    FROM tblVersion
      INNER JOIN tblUpdatedAppGroup
        ON tblVersion.UpdatedAppID = tblUpdatedAppGroup.UpdatedAppID
      INNER JOIN tblGroup
        ON tblUpdatedAppGroup.GroupID = tblGroup.ID
      INNER JOIN tblUserGroup
        ON tblGroup.ID = tblUserGroup.GroupID
      INNER JOIN tblAndroidVersion
        ON tblVersion.AndroidVersionID = tblAndroidVersion.ID
        AND tblUserGroup.UserID = UserID
        AND tblVersion.UpdatedAppID = UpdatedAppID;
    CALL getMessage("Successful");
  END
$$

--
-- Definition for procedure GrantGroupApp
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GrantGroupApp()
proc:BEGIN
    DECLARE AppID int DEFAULT 0;
    DECLARE GroupID int DEFAULT 0;
    SELECT
      ParamValue INTO AppID
    FROM tbtempParam
    WHERE ParamName = "AppID";

    SELECT
      ParamValue INTO GroupID
    FROM tbtempParam
    WHERE ParamName = "GroupID";
    IF NOT EXISTS(SELECT ID FROM tblGroup WHERE ID = GroupID) THEN
      CALL getMessage("Incorrect group");
      LEAVE proc;
    end IF;
    IF NOT EXISTS(SELECT ID FROM tblUpdatedApp WHERE ID = AppID) THEN
      CALL getMessage("Incorrect app");
      LEAVE proc;
    end IF;
    
    IF NOT EXISTS(SELECT * FROM tblUpdatedAppGroup t WHERE t.UpdatedAppID = AppID AND t.GroupID = GroupID) THEN
      INSERT INTO tblUpdatedAppGroup VALUES (AppID,GroupID);
      CALL GetMessage("Successful");
      LEAVE proc;
    END IF;
    CALL GetMessage("App already assigned to group");
END
$$

--
-- Definition for procedure GrantGroupMethod
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GrantGroupMethod()
proc:BEGIN
    DECLARE MethodID int DEFAULT 0;
    DECLARE GroupID int DEFAULT 0;
    SELECT
      ParamValue INTO MethodID
    FROM tbtempParam
    WHERE ParamName = "MethodID";

    SELECT
      ParamValue INTO GroupID
    FROM tbtempParam
    WHERE ParamName = "GroupID";
    IF NOT EXISTS(SELECT ID FROM tblGroup WHERE ID = GroupID) THEN
      CALL getMessage("Incorrect group");
      LEAVE proc;
    end IF;
    IF NOT EXISTS(SELECT ID FROM tblServiceMethod WHERE ID = MethodID) THEN
      CALL getMessage("Incorrect method");
      LEAVE proc;
    end IF;
    
    IF NOT EXISTS(SELECT * FROM tblServiceMethodGroup t WHERE t.ServiceMethodID = MethodID AND t.GroupID = GroupID) THEN
      INSERT INTO tblServiceMethodGroup VALUES (GroupID, MethodID);
      CALL GetMessage("Successful");
      LEAVE proc;
    END IF;
    CALL GetMessage("Method already assigned to group");
END
$$

--
-- Definition for procedure GrantUserGroup
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GrantUserGroup()
proc:BEGIN
    DECLARE UserID int DEFAULT 0;
    DECLARE GroupID int DEFAULT 0;
    SELECT
      ParamValue INTO UserID
    FROM tbtempParam
    WHERE ParamName = "UserID";

    SELECT
      ParamValue INTO GroupID
    FROM tbtempParam
    WHERE ParamName = "GroupID";
    IF NOT EXISTS(SELECT ID FROM tblGroup WHERE ID = GroupID) THEN
      CALL getMessage("Incorrect group");
      LEAVE proc;
    end IF;
    IF NOT EXISTS(SELECT ID FROM tblUser WHERE ID = UserID) THEN
      CALL getMessage("Incorrect user name");
      LEAVE proc;
    end IF;

    IF NOT EXISTS(SELECT * FROM tblUserGroup WHERE tblUserGroup.UserID = UserID AND tblUserGroup.GroupID = GroupID) THEN
      INSERT INTO tblUserGroup VALUES (UserID,GroupID);
      CALL GetMessage("Successful");
      LEAVE proc;
    END IF;
    CALL GetMessage("Group already assigned");
END
$$

--
-- Definition for procedure HasAppAccess
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE HasAppAccess(IN `AppID` INT, IN `inUserID` INT, OUT `HasAccess` INT)
BEGIN
  SELECT
    COUNT(*) INTO HasAccess
  FROM tblUpdatedApp
    INNER JOIN tblUpdatedAppGroup
      ON tblUpdatedApp.ID = tblUpdatedAppGroup.UpdatedAppID
      AND tblUpdatedApp.ID = AppID
    INNER JOIN tblGroup
      ON tblUpdatedAppGroup.GroupID = tblGroup.ID
    INNER JOIN tblUserGroup
      ON tblGroup.ID = tblUserGroup.GroupID
      AND tblUserGroup.UserID = inUserID;
END
$$

--
-- Definition for procedure HasMethodAccess
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE HasMethodAccess(IN MethodID int, IN inUserID int, OUT HasAccess int)
BEGIN

SELECT COUNT(*) INTO HasAccess FROM tblServiceMethodGroup 
  INNER JOIN tblServiceMethod ON tblServiceMethodGroup.ServiceMethodID = tblServiceMethod.ID AND tblServiceMethod.ID = MethodID
  INNER JOIN tblGroup ON tblServiceMethodGroup.GroupID = tblGroup.ID
  INNER JOIN tblUserGroup  ON tblUserGroup.GroupID = tblGroup.ID AND tblUserGroup.UserID = inUserID;

END
$$

--
-- Definition for procedure InsertApp
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE InsertApp()
BEGIN

END
$$

--
-- Definition for procedure InsertComment
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE InsertComment(IN `UserID` INT)
proc:BEGIN
  DECLARE HasAccess int DEFAULT 0;
  DECLARE AppID int(10);
  DECLARE Comment varchar(255);
  DECLARE Date varchar(10);
  SELECT ParamValue INTO AppID FROM tbtempParam WHERE ParamName = "AppID";
  SELECT ParamValue INTO Comment FROM tbtempParam WHERE ParamName = "Comment";
  SELECT ParamValue INTO Date FROM tbtempParam WHERE ParamName = "Date";
CALL HasAppAccess(AppID,UserID,HasAccess);
IF HasAccess = 0 THEN
  CALL getMessage("App not allowed");
  LEAVE proc;
END IF;  
    START TRANSACTION;
      INSERT INTO tblUpdatedAppComment (UpdatedAppID,UserID,Publishable,Comment,Date)
      VALUES( AppID, UserID ,Publishable, Comment, Date);
      IF ROW_COUNT() > 0 THEN
          CALL GetMessage("Successful");
          COMMIT;
      ELSE
          CALL GetMessage("Insert error");
          ROLLBACK;
      END IF;

END
$$

--
-- Definition for procedure InsertUpdateRate
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE InsertUpdateRate(IN `UserID` INT)
proc:
  BEGIN
    DECLARE AppID int DEFAULT 0;
    DECLARE HasAccess int DEFAULT 0;
    DECLARE OldRate int DEFAULT 0;
    DECLARE NewRate int DEFAULT 0;
    DECLARE OldID int DEFAULT 0;
    SELECT
      ParamValue INTO AppID
    FROM tbtempParam
    WHERE ParamName = "AppID";
    CALL HasAppAccess(AppID, UserID, HasAccess);

    IF HasAccess = 0 THEN
      CALL getMessage("App not allowed");
      LEAVE proc;
    END IF;

    SELECT
      ParamValue INTO NewRate
    FROM tbtempParam
    WHERE ParamName = "Rate";
    IF NewRate > 5
      AND NewRate < 1 THEN
      CALL getMessage("Invalid rate");
      LEAVE proc;
    END IF;

    SELECT
      ID INTO OldID
    FROM tblUpdatedAppRate
    WHERE tblUpdatedAppRate.UserID = UserID
    AND UpdatedAppID = AppID;
    -- rate already exist
    IF oldID > 0 THEN
      SELECT
        tblUpdatedAppRate.Rate INTO OldRate
      FROM tblUpdatedAppRate
      WHERE ID = OldID;
      CASE OldRate
        WHEN 1 THEN UPDATE tblUpdatedApp
            SET Score1 = Score1 - 1
            WHERE ID = AppID;
        WHEN 2 THEN UPDATE tblUpdatedApp
            SET score2 = score2 - 1
            WHERE ID = AppID;
        WHEN 3 THEN UPDATE tblUpdatedApp
            SET score3 = score3 - 1
            WHERE ID = AppID;
        WHEN 4 THEN UPDATE tblUpdatedApp
            SET score4 = score4 - 1
            WHERE ID = AppID;
        WHEN 5 THEN UPDATE tblUpdatedApp
            SET score5 = score5 - 1
            WHERE ID = AppID;
      END CASE;
      UPDATE tblUpdatedAppRate t
      SET t.Rate = NewRate
      WHERE t.ID = OldID;
    ELSE
      INSERT INTO tblUpdatedAppRate (UpdatedAppID, UserID, Rate)
        VALUES (AppID, UserID, NewRate);
    END IF;
    CASE NewRate
      WHEN 1 THEN UPDATE tblUpdatedApp
          SET Score1 = Score1 + 1
          WHERE ID = AppID;
      WHEN 2 THEN UPDATE tblUpdatedApp
          SET score2 = score2 + 1
          WHERE ID = AppID;
      WHEN 3 THEN UPDATE tblUpdatedApp
          SET score3 = score3 + 1
          WHERE ID = AppID;
      WHEN 4 THEN UPDATE tblUpdatedApp
          SET score4 = score3 + 1
          WHERE ID = AppID;
      WHEN 5 THEN UPDATE tblUpdatedApp
          SET score5 = score5 + 1
          WHERE ID = AppID;
    END CASE;
    SELECT
      "AppRate" AS "info";
    SELECT
      Score1,
      Score2,
      Score3,
      Score4,
      Score5
    FROM tblUpdatedApp
    WHERE ID = AppID;
    IF OldID = 0 THEN
      CALL GetMessage("Rate inserted");
    ELSE
      CALL GetMessage("Rate updated");
    END IF;
  END
$$

--
-- Definition for procedure OuterMethodList
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE OuterMethodList(IN `UserID` INT)
BEGIN
  CREATE TEMPORARY TABLE IF NOT EXISTS tbtemp (ID int(10),MethodName varchar(100),
    ReturnType nvarchar(20), Description nvarchar(1000));
INSERT INTO tbtemp (
  SELECT distinct tblServiceMethod.ID , tblServiceMethod.MethodName
    , tblServiceMethod.ReturnType, tblServiceMethod.Description FROM tblServiceMethod
  INNER JOIN tblServiceMethodGroup ON tblServiceMethodGroup.ServiceMethodID = tblServiceMethod.ID
  INNER JOIN tblGroup ON tblServiceMethodGroup.GroupID = tblGroup.ID
  INNER JOIN tblUserGroup  ON tblUserGroup.GroupID = tblGroup.ID AND tblUserGroup.UserID = UserID
  AND tblServiceMethod.InnerMethod = 0);
  SELECT "OuterMethodList" AS info;
  SELECT * FROM tbtemp ORDER BY MethodName ASC;
  SELECT "ParamsList" AS info;
  SELECT tbtemp.MethodName,tblMethodParam.MethodID, tblMethodParam.Name AS 'ParamName',
    tblMethodParam.Type, tblMethodParam.Description FROM tbtemp INNER JOIN tblMethodParam ON tbtemp.ID = tblMethodParam.MethodID;

  CALL GetMessage("Successful");
END
$$

--
-- Definition for procedure ParamParser
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ParamParser(IN `str` TEXT, IN `Delimiter` VARCHAR(20), IN `EqualSign` VARCHAR(20))
BEGIN
  DECLARE remain int DEFAULT 1;
  DECLARE ParamName,t1,t2 nvarchar(50);
  DECLARE temp,ParamValue nvarchar(10000);

CREATE TEMPORARY TABLE IF NOT EXISTS tbtempParam (ID int AUTO_INCREMENT,
    ParamName varchar(50), ParamValue nvarchar(10000), PRIMARY KEY (ID));
  TRUNCATE tbtempParam;
WHILE LENGTH(str)>0 do
  
  SET temp = REPLACE(SUBSTRING(SUBSTRING_INDEX(str,CONCAT('_',Delimiter),1),
    LENGTH(SUBSTRING_INDEX(str,CONCAT('_',Delimiter),0))+1) ,CONCAT('/' , Delimiter), Delimiter);
  
  SET ParamName = REPLACE(SUBSTRING(SUBSTRING_INDEX(temp,CONCAT('_',EqualSign),1),
    LENGTH(SUBSTRING_INDEX(temp,CONCAT('_',EqualSign),0))+1) ,CONCAT('/' , EqualSign), EqualSign);

  SET ParamValue = REPLACE(SUBSTRING(SUBSTRING_INDEX(temp,CONCAT('_',EqualSign),2),
    LENGTH(SUBSTRING_INDEX(temp,CONCAT('_',EqualSign),1))+3) ,CONCAT('/' , EqualSign), EqualSign);
  SET str = SUBSTRING(str,LOCATE(CONCAT('_',Delimiter),str)+2);
INSERT INTO tbtempParam (ParamName,ParamValue) VALUES (ParamName,ParamValue);
end WHILE;
 
END
$$

--
-- Definition for procedure RevokeGroupApp
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE RevokeGroupApp()
proc:BEGIN
    DECLARE AppID int DEFAULT 0;
    DECLARE GroupID int DEFAULT 0;
    SELECT
      ParamValue INTO AppID
    FROM tbtempParam
    WHERE ParamName = "AppID";

    SELECT
      ParamValue INTO GroupID
    FROM tbtempParam
    WHERE ParamName = "GroupID";
    IF NOT EXISTS(SELECT ID FROM tblGroup WHERE ID = GroupID) THEN
      CALL getMessage("Incorrect group");
      LEAVE proc;
    end IF;
    IF NOT EXISTS(SELECT ID FROM tblUpdatedApp WHERE ID = AppID) THEN
      CALL getMessage("Incorrect app");
      LEAVE proc;
    end IF;
    
    IF EXISTS(SELECT * FROM tblUpdatedAppGroup t WHERE t.UpdatedAppID = AppID AND t.GroupID = GroupID) THEN
      DELETE FROM tblUpdatedAppGroup WHERE tblUpdatedAppGroup.UpdatedAppID = AppID AND tblUpdatedAppGroup.GroupID = GroupID;
      CALL GetMessage("Successful");
      LEAVE proc;
    END IF;
    CALL GetMessage("Unassigned app to group");

END
$$

--
-- Definition for procedure RevokeGroupMethod
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE RevokeGroupMethod()
proc:BEGIN
    DECLARE MethodID int DEFAULT 0;
    DECLARE GroupID int DEFAULT 0;
    SELECT
      ParamValue INTO MethodID
    FROM tbtempParam
    WHERE ParamName = "MethodID";

    SELECT
      ParamValue INTO GroupID
    FROM tbtempParam
    WHERE ParamName = "GroupID";
    IF NOT EXISTS(SELECT ID FROM tblGroup WHERE ID = GroupID) THEN
      CALL getMessage("Incorrect group");
      LEAVE proc;
    end IF;
    IF NOT EXISTS(SELECT ID FROM tblServiceMethod WHERE ID = MethodID) THEN
      CALL getMessage("Incorrect method");
      LEAVE proc;
    end IF;
    
    IF EXISTS(SELECT * FROM tblServiceMethodGroup t WHERE t.ServiceMethodID = MethodID AND t.GroupID = GroupID) THEN
      DELETE FROM tblServiceMethodGroup WHERE tblServiceMethodGroup.GroupID = GroupID AND tblServiceMethodGroup.ServiceMethodID = MethodID;
      CALL GetMessage("Successful");
      LEAVE proc;
    END IF;
    CALL GetMessage("Unassigned method to group");


END
$$

--
-- Definition for procedure RevokeUserGroup
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE RevokeUserGroup()
proc:BEGIN
    DECLARE UserID int DEFAULT 0;
    DECLARE GroupID int DEFAULT 0;
    SELECT
      ParamValue INTO UserID
    FROM tbtempParam
    WHERE ParamName = "UserID";

    SELECT
      ParamValue INTO GroupID
    FROM tbtempParam
    WHERE ParamName = "GroupID";
    IF NOT EXISTS(SELECT ID FROM tblGroup WHERE ID = GroupID) THEN
      CALL getMessage("Incorrect group");
      LEAVE proc;
    end IF;
    IF NOT EXISTS(SELECT ID FROM tblUser WHERE ID = UserID) THEN
      CALL getMessage("Incorrect user name");
      LEAVE proc;
    end IF;

    IF EXISTS(SELECT * FROM tblUserGroup WHERE tblUserGroup.UserID = UserID AND tblUserGroup.GroupID = GroupID) THEN
      DELETE FROM tblUserGroup WHERE tblUserGroup.UserID = UserID AND tblUserGroup.GroupID = GroupID;
      CALL GetMessage("Successful");
      LEAVE proc;
    END IF;
    CALL GetMessage("Unassigned group to user");
END
$$

--
-- Definition for procedure SearchAppByName
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SearchAppByName(IN `UserID` INT)
BEGIN
  DECLARE SearchText nvarchar(255);
  SELECT
    ParamValue INTO SearchText
  FROM tbtempParam
  WHERE ParamName = "SearchText";
  SELECT
    "SearchedApps" AS 'info';

  SELECT DISTINCT
    tblUpdatedApp.AppName,
    tblUpdatedApp.Installs,
    tblUpdatedApp.Description,
    tblDeveloper.DisplayName,
    tblVersion.Version,
    tblVersion.Size,
    tblVersion.PublishDate,
    tblVersion.Changes,
    tblVersion.IconPath,
    tblVersion.AppPath,
    tblUpdatedApp.Score1,
    tblUpdatedApp.Score2,
    tblUpdatedApp.Score3,
    tblUpdatedApp.Score4,
    tblUpdatedApp.Score5,
    tblUpdatedApp.Package
  FROM tblUpdatedApp
    INNER JOIN tblDeveloper
      ON tblUpdatedApp.DeveloperID = tblDeveloper.ID
      AND tblUpdatedApp.AppName LIKE CONCAT('%', SearchText, '%')
    INNER JOIN tblVersion
      ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
      AND tblVersion.IsUpdatedVersion <> 0
    INNER JOIN tblCategory
      ON tblUpdatedApp.CategoryID = tblCategory.ID
    INNER JOIN tblMainCategory
      ON tblCategory.MainCategoryID = tblMainCategory.ID
    INNER JOIN tblUpdatedAppGroup
      ON tblUpdatedApp.ID = tblUpdatedAppGroup.UpdatedAppID
    INNER JOIN tblGroup
      ON tblUpdatedAppGroup.GroupID = tblGroup.ID
    INNER JOIN tblUserGroup
      ON tblGroup.ID = tblUserGroup.GroupID
      AND tblUserGroup.UserID = UserID;
  CALL getMessage("Successful");
END
$$

--
-- Definition for procedure SearchAppInfo
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SearchAppInfo(IN `UserID` INT)
proc:
  BEGIN
    DECLARE SearchText nvarchar(255) DEFAULT '';
    DECLARE Page int DEFAULT 0;
    DECLARE offs int;
    SELECT
      ParamValue INTO SearchText
    FROM tbtempParam
    WHERE ParamName = "SearchText";

    SELECT
      ParamValue INTO Page
    FROM tbtempParam
    WHERE ParamName = "Page";
    SET offs = Page * 11;

    SELECT
      "AppListByCat" AS 'info';
    SELECT DISTINCT
	  tblUpdatedApp.ID as AppID,
      tblUpdatedApp.AppName,
      tblUpdatedApp.Installs,
      tblUpdatedApp.Description,
      tblDeveloper.DisplayName,
      tblVersion.Version,
      tblVersion.Size,
      tblVersion.PublishDate,

      tblVersion.Changes,
      tblVersion.IconPath,
      tblVersion.AppPath,
      tblUpdatedApp.Score1,
      tblUpdatedApp.Score2,
      tblUpdatedApp.Score3,
      tblUpdatedApp.Score4,
      tblUpdatedApp.Score5,
      tblUpdatedApp.Package 
    FROM tblUpdatedApp 
      INNER JOIN tblDeveloper
        ON tblUpdatedApp.DeveloperID = tblDeveloper.ID
        AND (AppName LIKE CONCAT('%', SearchText, '%') OR Description LIKE CONCAT('%', SearchText, '%'))
      INNER JOIN tblVersion
        ON tblUpdatedApp.ID = tblVersion.UpdatedAppID
        AND tblVersion.IsUpdatedVersion <> 0
      INNER JOIN tblCategory
        ON tblUpdatedApp.CategoryID = tblCategory.ID
      INNER JOIN tblUpdatedAppGroup
        ON tblUpdatedApp.ID = tblUpdatedAppGroup.UpdatedAppID
      INNER JOIN tblGroup
        ON tblUpdatedAppGroup.GroupID = tblGroup.ID
      INNER JOIN tblUserGroup
        ON tblGroup.ID = tblUserGroup.GroupID
        AND tblUserGroup.UserID = UserID
      ORDER BY tblVersion.ID DESC
        LIMIT 11 OFFSET offs;
    CALL getMessage("Successful");
  END
$$

--
-- Definition for procedure SignIn
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SignIn(IN UserName nvarchar(255))
BEGIN
  SELECT t.ID AS UserID , t.Password FROM tblUser t WHERE t.UserName = UserName;
END
$$

--
-- Definition for procedure SignUp
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SignUp()
proc:BEGIN
    DECLARE Name varchar(100);
    DECLARE Mobile char(11);
    DECLARE Email varchar(45);
    DECLARE Password varchar(200);
    DECLARE Sex char(1);
    DECLARE CreateDate char(8);
    DECLARE UserName varchar(100);
    
    SELECT ParamValue INTO Name
    FROM tbtempParam
    WHERE ParamName = "Name";
    
    SELECT ParamValue INTO Mobile
    FROM tbtempParam
    WHERE ParamName = "Mobile";

    SELECT ParamValue INTO Email
    FROM tbtempParam
    WHERE ParamName = "Email";

    SELECT ParamValue INTO Password
    FROM tbtempParam
    WHERE ParamName = "Password";

    SELECT ParamValue INTO Sex
    FROM tbtempParam
    WHERE ParamName = "Sex";

    SELECT ParamValue INTO CreateDate
    FROM tbtempParam
    WHERE ParamName = "CreateDate";

    SELECT ParamValue INTO UserName
    FROM tbtempParam
    WHERE ParamName = "UserName";
	IF(Mobile<> '') THEN
    IF EXISTS(SELECT * FROM tblUser WHERE tblUser.Mobile = Mobile) THEN
      CALL GetMessage("Mobile exist");
      LEAVE proc;
    END IF;
	END IF;

    IF EXISTS(SELECT * FROM tblUser WHERE tblUser.UserName = UserName) THEN
      CALL GetMessage("Username already exist");
      LEAVE proc;
    END IF;

    START TRANSACTION;
      INSERT INTO tblUser(Name,Mobile,Email,Password,Sex,CreateDate,UserName)
        VALUES(Name,Mobile,Email,Password,Sex,CreateDate,UserName);
      IF ROW_COUNT() > 0 THEN
          INSERT INTO tblUserGroup(UserID,GroupID) VALUES(LAST_INSERT_ID(),1);
          CALL GetMessage("Successful");
          COMMIT;
      ELSE
          CALL GetMessage("Insert error");
          ROLLBACK;
      END IF;
      
END
$$

--
-- Definition for procedure ToggleAppMark
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ToggleAppMark(IN `UserID` INT)
proc:
BEGIN
  DECLARE HasAccess int DEFAULT 0;
  DECLARE info nvarchar(255);
  DECLARE AppID int(10);
SELECT ParamValue INTO AppID FROM tbtempParam WHERE ParamName = "AppID";
  CALL HasAppAccess(AppID,UserID,HasAccess);
IF HasAccess = 0 THEN
  CALL getMessage("App not allowed");
  LEAVE proc;
END IF;  
    IF NOT EXISTS(SELECT * FROM tblMark t WHERE t.UserID = UserID AND t.UpdatedAppID = AppID) THEN
      INSERT INTO tblMark VALUES (UserID,AppID);
	  SELECT "MarkState" AS info;
      SELECT 'Marked' as MarkStatus;

    ELSE
		DELETE FROM tblMark  WHERE tblMark.UserID = UserID AND tblMark.UpdatedAppID = AppID;
		SELECT "MarkState" AS info;
		SELECT 'Marked' as MarkStatus FROM tblMark t WHERE t.UserID = UserID and t.UpdatedAppID = AppID;
    END IF;
    CALL GetMessage("Successful");
END
$$

--
-- Definition for procedure UpdateUserInfo
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE UpdateUserInfo(IN `UserID` INT)
proc:BEGIN
    DECLARE Name varchar(100) DEFAULT '';
    DECLARE Mobile char(11) DEFAULT '';
    DECLARE Email varchar(45) DEFAULT '';
    DECLARE Password varchar(200) DEFAULT '';
    DECLARE Sex char(1) DEFAULT '';
    
    SELECT ParamValue INTO Name
    FROM tbtempParam
    WHERE ParamName = "Name";
    
    SELECT ParamValue INTO Mobile
    FROM tbtempParam
    WHERE ParamName = "Mobile";

    SELECT ParamValue INTO Email
    FROM tbtempParam
    WHERE ParamName = "Email";

    SELECT ParamValue INTO Password
    FROM tbtempParam
    WHERE ParamName = "Password";


    SELECT ParamValue INTO Sex
    FROM tbtempParam
    WHERE ParamName = "Sex";

    IF Name = '' THEN
      SELECT Name INTO Name  FROM tblUser t WHERE t.ID = UserID;
    end IF;

    IF Mobile = '' THEN
      SELECT Mobile INTO Mobile FROM tblUser t WHERE t.ID = UserID;
    end IF;

    IF Email = '' THEN
      SELECT Email INTO Email FROM tblUser t WHERE t.ID = UserID;
    end IF;
    
    IF Sex = '' THEN
      SELECT Sex INTO Sex FROM tblUser t WHERE t.ID = UserID;
    end IF;

    IF(Mobile<> '') THEN
      IF EXISTS(SELECT * FROM tblUser WHERE tblUser.Mobile = Mobile) THEN
        CALL GetMessage("Mobile exist");
        LEAVE proc;
      END IF;
    END IF;

    START TRANSACTION;
      IF Password = '' THEN
        UPDATE tblUser SET Name = Name,Mobile = Mobile ,Email = Email,Sex = Sex WHERE ID = UserID;
      ELSE
        UPDATE tblUser SET Name = Name,Mobile = Mobile ,Email = Email,Password = Password,Sex = Sex WHERE ID = UserID;
      END IF;      IF ROW_COUNT() > 0 THEN
          CALL GetMessage("Successful");
          COMMIT;
      ELSE
          CALL GetMessage("Update error");
          ROLLBACK;
      END IF;
      
END
$$

DELIMITER ;

-- 
-- Dumping data for table tblaccess
--
INSERT INTO tblaccess VALUES
(1, 'ممانعت از به خواب رفتن دستگاه', 'ممانعت از به خواب رفتن دستگاه'),
(2, 'کنترل لرزش', 'کنترل لرزش دستگاه'),
(3, 'ضبط صدا', 'ضبط صدا توسط میکروفون گوشی'),
(4, 'دسترسی کامل به اینترنت', 'دسترسی از wifi یا اینترنت اپراتور'),
(5, 'مشاهدهٔ اتصالات شبکه', 'اتصالات شبکه'),
(6, 'خواندن کارت حافظه', 'خواندن کارت حافظه'),
(7, 'تغییر یا حذف محتویات کارت حافظه', 'تغییر یا حذف محتویات کارت حافظه'),
(8, 'اجرا شدن در هنگام راه‌اندازی', 'اجرا شدن در هنگام راه‌اندازی');

-- 
-- Dumping data for table tblandroidversion
--
INSERT INTO tblandroidversion VALUES
(1, '2.2'),
(2, '2.3'),
(3, '4.0'),
(4, '4.1');

-- 
-- Dumping data for table tblcategory
--
INSERT INTO tblcategory VALUES
(1, 0, 'سبک زندگی'),
(2, 0, 'کاربردی'),
(3, 0, 'دارو'),
(4, 0, 'آرایشی بهداشتی');

-- 
-- Dumping data for table tblcontent
--
INSERT INTO tblcontent VALUES
(1, 'درباره ما', 'دربارهٔ بازار\nبازار، محلی برای عرضه و فروش برنامه‌های اندرویدی‌ست که به‌طور ویژه به کاربران ایرانی سرویس‌دهی می‌کند. ما در بازار تلاش کرده‌ایم تا کانال توزیع مناسب و راحتی میان برنامه‌نویسان و کاربران دستگاه‌های اندرویدی در ایران ایجاد کنیم تا ایرانیان نیز بتوانند همچون کاربران دیگر، از امکانات اولیهٔ تلفن‌های هوشمند که در برنامه‌هایشان خلاصه می‌شود، به راحتی استفاده کنند.\n\nکار تولید نرم‌افزار، جز درد هزینه نیز دارد و ما به دنبال این هستیم تا راه‌های مناسب برای کسب درآمد برنامه‌نویسان ایجاد کنیم. در راه رسیدن به اهدافمان هم‌اکنون نیازمند یاری شما در این زمینه‌ها هستیم:\n\nگسترش تعداد مخاطبان بازار، چه برنامه‌نویسان و چه کاربران برنامه‌ها\nدریافت پیشنهادها و انتقادات شما\nتوسعهٔ برنامه‌های جدید از جانب شما\nنقدهای عمومی شما دربارهٔ بازار\nبازاری برای کاربران\nشما می‌توانید بازار را روی تلفن همراه یا تبلت اندرویدی خود نصب کنید و روزانه به برنامه‌های جدید ایرانی و خارجی مختلفی دسترسی داشته باشید. در بازار ۲۵ گروه مختلف مانند آموزش، اخبار و مجلات، پز‌شکی، خرید، شخصی‌سازی، کتاب‌ها و مراجع، خرید و ... برای برنامه‌ها و گروه‌های مختلفی برای بازی‌ها وجود دارد. علاوه بر برنامه‌های رایگان، شما می‌توانید به تعداد زیادی از برنامه‌های ایرانی تجاری هم دسترسی داشته باشید و با خرید آسان، همیشه از این برنامه‌ها و به‌روزرسانی‌هایشان استفاده کنید.\n\nبازاری برای توسعه‌دهندگان\nبازار فرصت مناسبی‌ست برای توسعه‌دهندگان تا به بازار پر رونق و رو به رشد تلفن‌های هوشمند قدم بگذارند و کسب درآمد کنند. هم‌اکنون توسعه‌دهندگان برنامه‌های اندرویدی می‌توانید با فرآیند تسهیل‌شده‌ای که بازار مهیا کرده است و با استفاده از پنل مخصوص توسعه‌دهندگان، برنامه‌های خود را منتشر، به‌روزرسانی و مدیریت کنند.', 'درباره', 1),
(2, 'حریم شخصی', 'حریم شخصی\r\nحریم شخصی شما برای ما بسیار ارزشمند است. در این سیاستنامه، نوع و نحوه استفاده اطلاعاتی که از طریق بازار از شما گردآوری می‌کنیم را توضیح خواهیم داد. ما از اطلاعات کاربران تنها برای شخصی‌سازی ارائه خدمات و اطلاع‌رسانی استفاده می‌کنیم.\r\n\r\nجمع‌آوری و استفاده از اطلاعات شخصی\r\nاطلاعات شخصی داده‌هایی هستند که می‌توانند برای تشخیص یکتای یک فرد مورد استفاده قرار گیرتد و به‌طور مستقیم از طریق شما برای ما ارسال می‌شوند. در حال حاضر تنها اطلاعات شخصی کاربران در بازار نشانی ایمیل است که برای ایجاد حساب کاربری و دریافت خبرنامه در اختیار ما قرار می‌دهید. نشانی ایمیل کاربران به هیچ عنوان در اختیار شرکت‌ها و مؤسسات دیگر قرار نخواهد گرفت و از طریق خبرنامه تنها اطلاعات مربوط به بازار و محصولات آن به مشتریان ارسال خواهد شد. هرگاه خواستید از عضویت خبرنامه بازار خارج شوید از این صفحه اقدام کنید.\r\n\r\nجمع‌آوری و استفاده از اطلاعات غیرشخصی\r\nاز اطلاعاتی که از طریق آن امکان تطبیق شخص و داده وجود نداشته باشد در اینجا به عنوان اطلاعات غیرشخصی نام می‌بریم.\r\n\r\nاز طریق برنامه بازار این اطلاعات از سوی کاربران به سمت سرور فرستاده می‌شوند: شماره اندروید، مدل، برند، تولیدکننده و کد دستگاه، اثرانگشت بیلد، نسخه اندروید، رزلوشن صفحه، دی‌پی‌آی صفحه، چگالی صفحه، موقعیت مکانی تقریبی، خاموشی/روشنی شبکه بی‌سیم، خاموشی یا روشنی شبکه دیتا، خاموشی/روشنی وضعیت رومینگ، نام اپراتور، نوع شبکه، زبان دستگاه و فهرستی از نام بسته‌های نصب شده.\r\n\r\nجمع‌آوری این اطلاعات در حال حاضر تنها جنبه آماری دارند و همانطور که ذکر شد به هیچ طریقی امکان تطبیق آنها با کاربری خاص وجود ندارد. این آمار ما را در شناخت بهتر کاربران خود و نیازهای نرم‌افزاری آنها یاری می‌رساند. در آینده ممکن است از این داده‌ها برای ارائه تبلیغات هدفمند و مطابق میل کاربراستفاده شود، اما به هیچ عنوان دسترسی به آنها در اختیار شرکت‌های تبلیغاتی و یا سایر منابع خارج از بازار قرار نخواهد گرفت.', 'حریم شخصی', 1),
(3, 'شرایط', 'شرایط استفاده از خدمات', 'حریم شخصی', 1);

-- 
-- Dumping data for table tbldeveloper
--
INSERT INTO tbldeveloper VALUES
(1, 'امین پوراباذری', '1@yahoo.com', '', False, 'امین پوراباذری', 'امین', 'پوراباذری', '1', '1', '1'),
(2, 'برترینها', '2@yahoo.com', '', False, 'برترینها', 'برترینها', 'برترینها', '2', '2', '2'),
(3, 'امید', '3@yahoo.com', '', False, 'امید', 'امید', 'امید', '3', '3', '3'),
(4, 'IUST Programmers', '4@yahoo.com', '', False, 'IUST Programmers', 'IUST Programmers', 'IUST Programmers', '4', '4', '4'),
(5, 'ویکتوری', '5@yahoo.com', '', False, 'ویکتوری', 'ویکتوری', 'ویکتوری', '5', '5', '5'),
(6, 'plussoft', '6@yahoo.com', '', False, 'plussoft', 'plussoft', 'plussoft', '6', '6', '6'),
(7, 'محمد یوسفی', '7@yahoo.com', '', False, 'محمد یوسفی', 'محمد', 'یوسفی', '7', '7', '7'),
(8, 'ویکتوری', '8@yahoo.com', '', False, 'ویکتوری', 'ویکتوری', 'ویکتوری', '8', '8', '8'),
(9, 'پارسی جو', '9@yahoo.com', '', False, 'پارسی جو', 'پارسی جو', 'پارسی جو', '9', '9', '9'),
(10, 'ویراچیستا', '10@yahoo.com', '', False, 'ویراچیستا', 'ویراچیستا', 'ویراچیستا', '10', '10', '10'),
(11, 'گروه برنامه نویسی آبی', '11@yahoo.com', '', False, 'گروه برنامه نویسی آبی', 'گروه برنامه نویسی آبی', 'گروه برنامه نویسی آبی', '11', '11', '11'),
(12, 'امیدیه اندروید', '12@yahoo.com', '', False, 'امیدیه اندروید', 'امیدیه', 'اندروید', '12', '12', '12'),
(13, 'ابراهیم بیاگوی', '13@yahoo.com', '', False, 'ابراهیم بیاگوی', 'ابراهیم', 'بیاگوی', '13', '13', '13'),
(14, 'تیم تک رو', '14@yahoo.com', '', False, 'تیم تک رو', 'تیم تک رو', 'تیم تک رو', '14', '14', '14'),
(15, 'گروه پرستو', '15@yahoo.com', '', False, 'گروه پرستو', 'گروه پرستو', 'گروه پرستو', '15', '15', '15'),
(16, 'گروه آینده مجازی امن', '16@yahoo.com', '', False, 'گروه آینده مجازی امن', 'گروه آینده مجازی امن', 'گروه آینده مجازی امن', '16', '16', '16'),
(30, 'barij', 'x@x.com', '', False, 'گیاه کرفس', 'گیاه', 'کرفس', NULL, NULL, NULL);

-- 
-- Dumping data for table tblgroup
--
INSERT INTO tblgroup VALUES
(1, 'مدیر'),
(2, 'کاربر درجه 1'),
(3, 'کاربر درجه 2'),
(4, 'کاربر درجه 3'),
(5, 'کاربر خارجی');

-- 
-- Dumping data for table tblimage
--
INSERT INTO tblimage VALUES
(1, 1, 'amin.estekhareh.ir0.jpg'),
(2, 1, 'amin.estekhareh.ir1.jpg'),
(3, 1, 'amin.estekhareh.ir2.jpg'),
(4, 1, 'amin.estekhareh.ir3.jpg'),
(5, 1, 'amin.estekhareh.ir4.jpg'),
(6, 1, 'amin.estekhareh.ir5.jpg'),
(7, 1, 'amin.estekhareh.ir6.jpg'),
(8, 1, 'amin.estekhareh.ir7.jpg'),
(9, 1, 'amin.estekhareh.ir8.jpg'),
(10, 1, 'amin.estekhareh.ir9.jpg'),
(11, 2, 'co.sharang.bartarinha0.jpg'),
(12, 2, 'co.sharang.bartarinha1.jpg'),
(13, 2, 'co.sharang.bartarinha2.jpg'),
(14, 2, 'co.sharang.bartarinha3.jpg'),
(15, 2, 'co.sharang.bartarinha4.jpg'),
(16, 3, 'ir.onedot.dream5.jpg'),
(17, 3, 'ir.onedot.dream6.jpg'),
(18, 3, 'ir.onedot.dream7.jpg'),
(19, 3, 'ir.onedot.dream8.jpg'),
(20, 3, 'ir.onedot.dream9.jpg'),
(21, 3, 'ir.onedot.dream10.jpg'),
(22, 4, 'com.iust.jadval0.jpg'),
(23, 4, 'com.iust.jadval1.jpg'),
(24, 4, 'com.iust.jadval2.jpg'),
(25, 4, 'com.iust.jadval3.jpg'),
(26, 4, 'com.iust.jadval4.jpg'),
(27, 5, 'com.TarzTahieMoraba0.jpg'),
(28, 5, 'com.TarzTahieMoraba1.jpg'),
(29, 5, 'com.TarzTahieMoraba2.jpg'),
(30, 5, 'com.TarzTahieMoraba3.jpg'),
(31, 5, 'com.TarzTahieMoraba4.jpg'),
(32, 6, 'ir.plussoft.asheghanehasms0.jpg'),
(33, 6, 'ir.plussoft.asheghanehasms1.jpg'),
(34, 6, 'ir.plussoft.asheghanehasms2.jpg'),
(35, 6, 'ir.plussoft.asheghanehasms3.jpg'),
(36, 6, 'ir.plussoft.asheghanehasms4.jpg'),
(37, 7, 'com.shalamrood.faleanbia0.jpg'),
(38, 7, 'com.shalamrood.faleanbia1.jpg'),
(39, 7, 'com.shalamrood.faleanbia2.jpg'),
(40, 7, 'com.shalamrood.faleanbia3.jpg'),
(41, 8, 'com.NejatZendegiZanashoie0.jpg'),
(42, 8, 'com.NejatZendegiZanashoie1.jpg'),
(43, 8, 'com.NejatZendegiZanashoie2.jpg'),
(44, 8, 'com.NejatZendegiZanashoie3.jpg'),
(45, 8, 'com.NejatZendegiZanashoie4.jpg'),
(46, 9, 'ir.parsijoo0.jpg'),
(47, 9, 'ir.parsijoo1.jpg'),
(48, 9, 'ir.parsijoo2.jpg'),
(49, 9, 'ir.parsijoo3.jpg'),
(50, 9, 'ir.parsijoo5.jpg'),
(51, 9, 'ir.parsijoo6.jpg'),
(52, 9, 'ir.parsijoo7.jpg'),
(53, 10, 'vira.chista.nurse0.jpg'),
(54, 10, 'vira.chista.nurse1.jpg'),
(55, 10, 'vira.chista.nurse2.jpg'),
(56, 10, 'vira.chista.nurse3.jpg'),
(57, 10, 'vira.chista.nurse4.jpg'),
(58, 11, 'com.blueprogrammer.pelakyab0.jpg'),
(59, 11, 'com.blueprogrammer.pelakyab2.jpg'),
(60, 11, 'com.blueprogrammer.pelakyab5.jpg'),
(61, 11, 'com.blueprogrammer.pelakyab6.jpg'),
(62, 11, 'com.blueprogrammer.pelakyab7.jpg'),
(63, 11, 'com.blueprogrammer.pelakyab8.jpg'),
(64, 12, 'com.milad.ashtari.police1.jpg'),
(65, 12, 'com.milad.ashtari.police2.jpg'),
(66, 12, 'com.milad.ashtari.police3.jpg'),
(67, 12, 'com.milad.ashtari.police4.jpg'),
(68, 12, 'com.milad.ashtari.police5.jpg'),
(69, 12, 'com.milad.ashtari.police6.jpg'),
(70, 13, 'com.byagowi.persiancalendar0.jpg'),
(71, 13, 'com.byagowi.persiancalendar1.jpg'),
(72, 13, 'com.byagowi.persiancalendar2.jpg'),
(73, 14, 'ir.takro.AppLocker0.jpg'),
(74, 14, 'ir.takro.AppLocker1.jpg'),
(75, 14, 'ir.takro.AppLocker2.jpg'),
(76, 14, 'ir.takro.AppLocker3.jpg'),
(77, 14, 'ir.takro.AppLocker4.jpg'),
(78, 15, 'com.parastodev.proflock0.jpg'),
(79, 15, 'com.parastodev.proflock1.jpg'),
(80, 15, 'com.parastodev.proflock2.jpg'),
(81, 15, 'com.parastodev.proflock3.jpg'),
(82, 15, 'com.parastodev.proflock4.jpg'),
(83, 16, 'com.example.weather.irimoweather0.jpg'),
(84, 16, 'com.example.weather.irimoweather1.jpg'),
(85, 16, 'com.example.weather.irimoweather2.jpg'),
(86, 16, 'com.example.weather.irimoweather3.jpg'),
(87, 16, 'com.example.weather.irimoweather4.jpg'),
(88, 17, 'amin.estekhareh.ir0.jpg'),
(89, 17, 'amin.estekhareh.ir1.jpg'),
(90, 17, 'amin.estekhareh.ir2.jpg'),
(91, 17, 'amin.estekhareh.ir3.jpg'),
(92, 17, 'amin.estekhareh.ir6.jpg'),
(93, 17, 'amin.estekhareh.ir7.jpg'),
(94, 17, 'amin.estekhareh.ir8.jpg'),
(95, 17, 'amin.estekhareh.ir9.jpg'),
(96, 18, 'com.iust.jadval0.jpg'),
(97, 18, 'com.iust.jadval1.jpg'),
(98, 18, 'com.iust.jadval2.jpg'),
(99, 18, 'com.iust.jadval3.jpg'),
(100, 18, 'com.iust.jadval4.jpg'),
(1000, 100, '100.png'),
(1001, 100, '101.png'),
(1002, 100, '102.png'),
(1003, 100, '103.png');

-- 
-- Dumping data for table tblmaincategory
--
INSERT INTO tblmaincategory VALUES
(1, 'برنامه ها'),
(2, 'بازی ها');

-- 
-- Dumping data for table tblmark
--
INSERT INTO tblmark VALUES
(3, 1),
(6, 2),
(6, 6),
(6, 16),
(62, 108),
(6, 109),
(62, 109);

-- 
-- Dumping data for table tblmessage
--
INSERT INTO tblmessage VALUES
(0, 'Successful', 'موفقیت آمیز', 'وب متد با موفقیت اجرا شد'),
(1, 'Inner method not allowed', 'خطای دسترسی به متد داخلی', 'اجازه دسترسی به متد داخلی وجود ندارد'),
(2, 'Incorrect user name', 'نام کاربری اشتباه', 'نام کاربری اشتباه می باشد'),
(3, 'Method not exists', 'چنین متدی وجود ندارد', 'چنین متدی وجود ندارد'),
(4, 'Method not allowed', 'اجازه دسترسی به این متد وجود ندارد', 'اجازه دسترسی به این متد توسط شما وجود ندارد'),
(5, 'App not allowed', 'دسترسی به این اپلیکیشن امکان پذیر نمی باشد', 'دسترسی به این اپلیکیشن امکان پذیر نمی باشد'),
(6, 'Invalid parameters', 'پارامتر اشتباه', 'یک یا چند پارامتر به صورت ناصحیح وارد شده است'),
(7, 'Insert error', 'خطای درج', 'خطایی در هنگام درج رخ داده است، ممکن است پارامترها به صورت صحیح ارسال نشده باشند'),
(8, 'Invalid rate', 'امتیاز غلط', 'امتیاز داده شده به اپلیکیشن در بازه صحیح (1 تا 5) نمی باشد'),
(9, 'Rate updated', 'امتیاز به روز شد', 'امتیاز جدید داده شده به اپلیکیشن جایگزین قبلی شد'),
(10, 'Rate inserted', 'امتیاز ثبت شد', 'امتیاز جدید ثبت شد'),
(11, 'Incorrect group', 'گروه اشتباه می باشد', 'گروه داده شده اشتباه می باشد'),
(12, 'Group already assigned', 'گرو قبلا منتسب شده است', 'کاربر قبلا دارای این گروه بوده است'),
(13, 'Incorrect method', 'متد اشتباه', 'چنین سرویس متدی وجود ندارد'),
(14, 'Method already assigned to group', 'متد قبلا به این گروه تخصیص داده شده است', 'اجازه دسترسی به این متد قبلا به این گروه داده شده است'),
(15, 'Incorrect app', 'اپلیکیشن اشتباه', 'چنین اپلیکیشنی وجود ندارد'),
(16, 'App already assigned to group', 'اپلیکیشن قبلا به این گروه تخصیص داده شده است', 'اجازه دسترسی به این اپلیکیشن قبلا به این گروه داده شده است'),
(17, 'Unassigned group to user', 'کاربر دارای این گروه نبوده است', 'عضویت در این گروه از قبل ملغی شده است'),
(18, 'Unassigned method to group', 'گروه قبلا دارای این متد نبوده است', 'این گروه از قبل اجازه دسترسی به این متد را نداشته است'),
(19, 'Unassigned app to group', 'گروه قبلا دارای این اپلیکیشن نبوده است', 'این گروه از قبل اجازه دسترسی به این اپلیکیشن را نداشته است'),
(20, 'Username already exist', 'نام کاربری قبلا ثبت شده است', 'نام کاربری قبلا ثبت شده است'),
(21, 'Mobile exist', 'شماره همراه وجود دارد', 'شماره تلفن همراه از قبل ثبت شده است'),
(22, 'App already marked', 'اپلیکیشن قبلا نشان دار شده است', 'این اپلیکیشن قبل از این توسط این کاربر نشان دار شده است'),
(23, 'Update error', 'خطای به روز رسانی', 'خطایی در عملیات به روز رسانی رخ داده است'),
(99, 'Unknown error', 'خطای نامشخص', 'خطای نامشخصی در سیستم رخ داده است');

-- 
-- Dumping data for table tblmethodparam
--
INSERT INTO tblmethodparam VALUES
(1, 'AppID', 1, 'int', NULL),
(2, 'MethodID', 8, 'int', NULL),
(3, 'CatID', 11, 'int', NULL),
(4, 'SearchText', 12, 'string(255)', NULL),
(5, 'DeveloperID', 13, 'int', NULL),
(6, 'UpdatedAppID', 14, 'int', NULL),
(7, 'MainCatID', 15, 'int', NULL),
(8, 'ContentTitle', 18, 'string', NULL),
(9, 'AppID', 19, 'int', NULL),
(11, 'Comment', 19, 'string(255)', NULL),
(12, 'Date', 19, 'string(8)', NULL),
(13, 'AppID', 20, 'int', NULL),
(14, 'Rate', 20, 'int', NULL),
(15, 'UserID', 21, 'int', NULL),
(16, 'GroupID', 21, 'int', NULL),
(17, 'MethodID', 22, 'int', NULL),
(18, 'GroupID', 22, 'int', NULL),
(19, 'AppID', 23, 'int', NULL),
(20, 'GroupID', 23, 'int', NULL),
(21, 'UserID', 24, 'int', NULL),
(22, 'GroupID', 24, 'int', NULL),
(23, 'MethodID', 25, 'int', NULL),
(24, 'GroupID', 25, 'int', NULL),
(25, 'AppID', 26, 'int', NULL),
(26, 'GroupID', 26, 'int', NULL),
(27, 'Name', 4, 'string(100)', NULL),
(28, 'Mobile', 4, 'string(11)', NULL),
(29, 'Email', 4, 'string(45)', NULL),
(30, 'Password', 4, 'string(200)', NULL),
(31, 'Sex', 4, 'string(1)', NULL),
(32, 'CreateDate', 4, 'string(8)', NULL),
(33, 'UserName', 4, 'string(100)', NULL),
(34, 'Page', 11, 'int', NULL),
(35, 'SearchText', 27, 'string(255)', NULL),
(36, 'Page', 27, 'int', NULL),
(37, 'AppID', 28, 'int', NULL),
(38, 'AppID', 29, 'int', NULL),
(39, 'Name', 30, 'string(100)', NULL),
(40, 'Mobile', 30, 'string(11)', NULL),
(41, 'Email', 30, 'string(45)', NULL),
(42, 'Password', 30, 'string(200)', NULL),
(43, 'Sex', 30, 'string(1)', NULL),
(44, 'Packages', 31, 'longText', 'لیست اپلیکیشن ها و نسخه های کاربر را با جداکننده سمی کالن برای اپلیکیشن و ویرگول برای ورژن را مشخص میکند'),
(45, 'Page', 32, 'int', NULL);

-- 
-- Dumping data for table tblrelatedapp
--
INSERT INTO tblrelatedapp VALUES
(1, 2),
(1, 3);

-- 
-- Dumping data for table tblservicemethod
--
INSERT INTO tblservicemethod VALUES
(1, 'FullAppRetrieve', 'MultiTable', 'بازیابی کامل اطلاعات مربوط به اپلیکیشن', False),
(3, 'SignIn', 'Value', 'ورود به سیستم', True),
(4, 'SignUp', 'Message', 'ساخت حساب کاربری در سیستم', False),
(5, 'Callmethod', 'Various', 'فراخوانی متدها با استفاده از نام کاربر و نام متد', True),
(6, 'HassMethodAccess', 'Value', 'بررسی اجازه دسترسی به متد خاص توسط کاربر خاص', True),
(7, 'OuterMethodList', 'Table', 'لیست متدهای خارجی را برمی گرداند', False),
(9, 'GetMessage', 'Table', 'پیغامی از جدول پیام ها را برمی گرداند', True),
(10, 'ParamParser', 'Table', 'رشته ورودی را به جفت کلید-مقدار تبدیل می کند', True),
(11, 'AppListByCat', 'Table', 'لیست اپلیکیشن ها را بر اساس دسته بندی می دهد', False),
(12, 'SearchAppByName', 'Table', 'لیست اپلیکیشن ها را بر مبنای متن داده شده  روی نام اپلیکیشن ها می دهد', False),
(13, 'GetDeveloperByID', 'Row', 'اطلاعات توسعه دهنده را برمبنای فیلد ID برمی گرداند', False),
(14, 'GetVersionByUpdatedAppID', 'Table', 'لیست ورژن ها را بر اساس کلید خارجی UpdatedAppID بر می گرداند', False),
(15, 'GetCategoryList', 'Table', 'لیست دسته بندی ها را بر مبنای دسته بندی اصلی بر می گرداند', False),
(16, 'GetUserInfo', 'Row', 'اطلاعات کاربر را برمی گرداند', False),
(17, 'GetUserMarkedApps', 'Table', 'لیست اپلیکیشن های مارک دار کاربر را بر میگرداند', False),
(18, 'GetContentByTitle', 'Row', 'محتوایی بر مبنای نوع آن برمی گرداند', False),
(19, 'InsertComment', 'Row', 'نظری را برای اپلیکیشن از طرف کاربر ثبت می کند', False),
(20, 'InsertUpdateRate', 'Message', 'امتیاز کاربر به اپلیکیشن را ثبت یا به روز می کند', False),
(21, 'GrantUserGroup', 'Message', 'گروه کاربری را به یک کاربر منتسب می کند', False),
(22, 'GrantGroupMethod', 'Message', 'اجازه دسترسی به متد خاصی را به یک گروه می دهد', False),
(23, 'GrantGroupApp', 'Message', 'اجازه دسترسی به اپلیکیشن خاصی را به یک گروه می دهد', False),
(24, 'RevokeUserGroup', 'Message', 'عضویت کاربر در گروه داده شده را لغو می کند', False),
(25, 'RevokeGroupMethod', 'Message', 'دسترسی به متد خاصی را توسط یک گروه لغو می کند', False),
(26, 'RevokeGroupApp', 'Message', 'اجازه دسترسی به اپلیکیشن خاصی را از یک گروه می گیرد', False),
(27, 'SearchAppInfo', 'Table', 'اپلیکیشن ها را برمبنای فیلد های نام و توضیحات جست و جو می کند', False),
(28, 'GetCommentsByAppID', 'Table', 'نظرات کاربران را بر مبنای شناسه اپلیکیشن برمی گرداند', False),
(29, 'ToggleAppMark', 'Message', 'یک اپلیکیشن را برای کاربر نشان دار می کند', False),
(30, 'UpdateUserInfo', 'Message', 'اطلاعات کاربر را به روز رسانی می کند', False),
(31, 'GetAppUpdateList', 'Table', 'لیست اپلیکیشن های به روز موجود بر اساس موارد نصب شده توسط کاربر را برمی گرداند', False),
(32, 'GetAppListByPopularity', 'Table', 'لیست تمام اپلیکیشن ها را به ترتیب محبوبیت نمایش می دهد', False);

-- 
-- Dumping data for table tblservicemethodgroup
--
INSERT INTO tblservicemethodgroup VALUES
(1, 1),
(1, 4),
(1, 7),
(1, 11),
(1, 12),
(1, 13),
(1, 14),
(1, 15),
(1, 16),
(1, 17),
(1, 18),
(1, 19),
(1, 20),
(1, 21),
(1, 22),
(1, 23),
(1, 24),
(1, 25),
(1, 26),
(1, 27),
(1, 28),
(1, 29),
(1, 30),
(1, 31),
(1, 32),
(2, 1),
(2, 7),
(2, 22),
(3, 1),
(3, 7),
(4, 1),
(4, 7),
(4, 11),
(4, 12),
(4, 13),
(4, 14),
(4, 15),
(4, 16),
(4, 17),
(4, 18),
(4, 19),
(4, 20),
(5, 4),
(5, 7);

-- 
-- Dumping data for table tbltag
--

-- Table sadrrepository.tbltag does not contain any data (it is empty)

-- 
-- Dumping data for table tblupdatedapp
--
INSERT INTO tblupdatedapp VALUES
(1, 'استخاره با قرآن', 1, 1, 0000020000, 'به نام خدا\r\n\r\nاگر شما از جمله آن دسته از افرادی هستید که دوست دارید که برای برخی کارها به قرآن استخاره بزنید اما روش صحیح استخاره با قرآن را نمی دانید. از این به بعد می توانید براحتی از برنامه ی استخاره با قرآن استفاده کنید روش صحیح استخاره در این نرم افزار مبتنی بر روش صحیح استخاره با قرآن می باشد.\r\n\r\n*انواع استخاره ( استخاره کلی ، استخاره ازدواج و استخاره ی معامله)\r\n\r\n*همراه با نمایش متن آیه ،ترجمه آیه ،شماره ی آیه،شماره ی صفحه و سوره ی انتخاب شده\r\n\r\n* همراه با نظر مراجع معظم تقلید در مورد صحیح بودن استخاره با نرم افزار\r\n\r\n*گرافیک اسلامی و زیبا همراه با انیمیشن های زیبا و جذاب\r\n\r\n*همراه با شبیه سازاثر انگشت برای جذابیت بیشتر\r\n\r\n*ارسال برنامه از داخل محیط خود برنامه\r\n\r\n*همراه با ذکرآداب استخاره\r\n\r\n*حجم بسیار کم نرم افزار\r\n\r\nما را با امتیازات و نظرات مثبت خود برای ساخت نرم افزارهای بهتر یاری کنید', 30, 200, 101, 102, 100, 'amin.estekhareh.ir'),
(2, 'برترین ها', 1, 1, 0000500000, 'هر روز به اپلیکیشن برترین ها سر بزنید و از خواندن آخرین اخبار و جذاب ترین مطالب لذت ببرید!\r\nکلیه امکانات برنامه رایگان و بدون نیاز به ثبت نام می باشد!\r\n\r\nاخبار و مطالب: ( اسلاید اول)\r\nاخبار روز، اخبار ورزشی، سبک زندگی، گردشگری، چهره ها، آشپزی، سلامت، دکوراسیون، فرهنگ و هنر، موفقیت، تکنولوژی، کودک و سرگرمی\r\n+ صفحه اول روزنامه های کشور، نقشه لحظه ای ترافیک تهران، فال روزانه برترین ها، فال حافظ، قیمت روز طلا، سکه و ارز، مجله ماشین، سخنان بزرگان، مجله طنز، شخصیت شناسی، دانلود نرم افزار\r\n\r\nبانک اطلاعات شهر تهران: (اسلاید دوم)\r\nدر این بخش، مشاغل مورد نیاز خانواده های تهرانی در گروه های زیر طبقه بندی شده اند:\r\nپزشک متخصص ، پزشک زیبایی، دندانپزشکی، رستوران و تهیه غذا، خدمات مجالس، آتلیه عکاسی، باشگاه های ورزشی، باغ و تالارپذیرایی، آرایشگاه و سالن زیبایی، مزون و شوی لباس، مبلمان و سرویس خواب، دکوراسیون داخلی، مدارس، مهد کودک، آژانس مسافرتی، آموزشگاه و ده ها صنف دیگر\r\n\r\nامکانات مجله موبایلی برترین ها:\r\n1- دسته بندی موضوعی اخبار و مطالب\r\n2- امکان ذخیره و مرور بصورت آفلاین\r\n3- امکان افزودن به لیست خواندنی ها\r\n4- امکان ایجاد لیست مورد علاقه ها\r\n5- دارای حالت تمام صفحه (Full screen)\r\n6- دسترسی و جابجایی راحت بین اخبار و مطالب و بانک اطلاعات تجاری شهر تهران\r\n7- نمایش کامل متن و تصاویر اخبار و مطالب\r\n8- امکان ورق زدن اخبار و مطالب بدون بازگشت به لیست\r\n9- امکان شخصی سازی پیشخوان اخبار و مطالب\r\n10- دارای حالت مطالعه در شب\r\n11- امکان به اشتراک گذاری اخبار و مطالب\r\n12- امکان تماس مستقیم و ارسال پیامک به صاحبان مشاغل ', 100, 500, 600, 10000, 500, 'co.sharang.bartarinha'),
(3, 'تعبیر خواب همراه', 1, 1, 0000005000, 'تعبیر خواب\r\n\r\nکم حجم ترین تعبیر خواب آفلاین فقط با ١.٩ مگابایت حجم! \r\n\r\nبرای اولین بار هر موضوع رو با ٤ تعبیر کننده معتبر در قالب یک اپلیکیشن کاملا رایگان برای شما خوبان اورده ایم\r\n\r\nامکانات\r\n\r\n•جستجو با بالاترین سرعت \r\n\r\n•امکان به اشتراک گذاری تعبیر ها\r\n\r\n•امکان به اشتراک گذاری برنامه\r\n\r\n•طراحی کاملا جدیدی رو میتونید در این اپلیکیشن تجربه کنید\r\n\r\n•امکان اجرا به دو شکل معمولی و تمام صفحه با انتخاب کاربر\r\n\r\n•امکان اجرا به شکل عمودی و افقی \r\n\r\n•و کلی امکانات جذاب و جدید دیگر :)\r\n\r\nامید وارم از این برنامه لذت برده و با دادن ستاره پنجم و دیدگاه خود مارا در بهتر کردن این اپلیکیشن راهنمایی کنید\r\n\r\nلطفا از دیگر برنامه های ما هم دیدن کنید', 50, 30, 4, 200, 20, 'ir.onedot.dream'),
(4, 'جدول', 4, 1, 0000200000, 'جدول پلاس، بهترین برنامه جدول شرح در متن برای اندروید.\r\n\r\nبا جدول پلاس ساعت ها سرگرم بشید و اطلاعات عمومی خودتون رو به چالش بکشید.\r\n\r\nویژگی های جدول پلاس :\r\n- آپدیت مرتب و هفتگی در هر جمعه (هر هفته 16 مرحله جدید)\r\n- عدم استفاده از لغات بسیار سنگین\r\n- امکان استفاده از راهنمایی برای حل جدول\r\n- امکان زوم کردن، و جابجا کردن جدول در صفحه\r\n- طراحی ساده و کاربر پسندانه برای بازی کردن، فقط کافیه که حرف ها رو جابجا کنید\r\n\r\nامیدواریم از این بازی لذت ببرید', 100, 21, 600, 600, 800, 'com.iust.jadval'),
(5, 'طرز تهیه انواع مربا', 5, 1, 0000005000, 'آموزش آموزش آموزش\r\nطرز تهیه انواع مربا در این برنامه ....\r\nبه زبانی کاملا ساده و روان .... تهیه ساده در خانه ....\r\nلیستی از مرباهای آموزش داده شده در برنامه :\r\nمربای بهار نارنج\r\nمربای آلبالو\r\nمربای پوست پسته\r\nمربای انار\r\nمربای گل محمدی\r\nمرباي انجير\r\nچند نکته در مورد مرباها\r\n مربای بالنگ\r\nمربای زغال اخته\r\nمربای خلال نارنج\r\nمربای كامكوآت\r\nمربای توت فرنگی\r\nمربای هلو\r\nمربای گردو\r\nمربای پوست پرتقال\r\nمربای سیب\r\nمربای گلابی\r\nمرباى زرشك\r\nمربای هویج\r\nمربای كیوی\r\n مرباى كدو حلوایى\r\nمربای لبو\r\nمرباى پوست هنوانه\r\nمربای قیسی\r\nمربای خیار\r\nمربای ترب سفید\r\nمرباي گيلاس\r\nمربای آلو سیاه\r\nمربای گریپ فورت\r\nمربای آناناس\r\nمربای بادمجان\r\nمربای پوست گریپ فروت\r\nمربای به\r\nمربای پسته تازه\r\nمربای آلوئه ورا\r\nمربای زردآلو\r\nمربای کدو تنبل\r\nمربای چغندر', 1, 20, 40, 80, 30, 'com.TarzTahieMoraba'),
(6, 'عاشقانه ها(پیامک)‏', 6, 1, 0000005000, 'عاشقانه ها یه نرم افزار خوبه پر از پیامک عاشقانه که نیاز هاتون رو برابرده میکنه', 5, 15, 30, 40, 6, 'ir.plussoft.asheghanehasms'),
(7, 'فال انبیاء', 7, 1, 0000100000, 'هم اکنون می توانید اپلیکیشن کاملا رایگان فال انبیاء را با حجمی بسیار پایین از کافه بازار دریافت نمایید.\r\nاین اپلیکیشن به شما اجازه می دهد تا فال گرفته شده را از طریق شبکه های اجتماعی و اپلیکیشنهای ارتباطی همچون وایبر، لاین، پیامک و... با دوستان خود به اشتراک بگذارید.', 20, 600, 800, 1000, 1000, 'com.shalamrood.faleanbia'),
(8, 'نجات زندگی زناشوی', 8, 1, 0000010000, '\r\nتمامی نکات جذب همسر و بهتر شدن رابطه در این برنامه....\r\nاینگونه زندگی زناشویی خود را نجات دهید ...\r\nتو زندگیتون قهر و دعوا زیاد دارین ؟\r\nمی خواین دل همسرتونو به دست بیارین ؟\r\nبرنامه ای شامل بیش از 150 مطلب کاربردی و مفید ...\r\nاگر در زندگی زناشویی خود دچار مشکلات ریز و درشتی هستید این برنامه به شما در حل آنها کمک خواهد کرد ...\r\nشامل :\r\nورود ممنوع های زندگی مشترک\r\nچگونه زندگی زناشویی خود را جذاب و محکم کنیم\r\nچگونه در دل شوهر راه یابیم؟\r\nروحیه عفو و گذشت را در خود تقویت کنید\r\nچگونه عشقمان را به همسرمان نشان دهیم؟\r\nنجات رابطه از دخالت و وابستگی\r\nوجود همسرتان را عادی تلقی نکنید\r\nمعنی چشم غره همسرتان چیست!؟\r\nهیچ کس بعد از ازدواج آدم نمی شود!\r\n40 نكته براي جلب توجه همسر\r\nشوهر خوبی باشید!\r\nو....', 1, 2, 100, 20, 20, 'com.NejatZendegiZanashoie'),
(9, 'پارسی جو', 9, 2, 0000010000, '\r\nپارسی‌ جو موتور جستجوی مستقل و بومی است که علاوه بر قابلیت جستجو در وب شامل سرویسهای متنوع دیگری نظیر سرویس هوشمند خبری، سرویس آب و هوا و ترجمه می باشد که در این برنامه سعی شده است تعدادی از مهمترین آنها یعنی جستجوی متنی در وب، جستجو در تصاویر و سرویس آوا به شکل سریع و آسان در اختیار کاربران قرار گیرد.\r\n\r\nوب:\r\nبا وارد کردن پرس و جوی موردنظر در این قسمت می توانید صفحات مرتبط با پرس و جوی خود را در وب پیدا کنید همچنین درصورتی که پرس و جو مطابق با سرویسی مانند آب و هوا، خودرو، اوقات شرعی و ... باشد در بالای نتایج جستجو، سرویس نمایان می شود. \r\n\r\nتصویر: \r\nبا وارد کردن پرس و جوی موردنظر در این قسمت می توانید عکسهای مرتبط با پرس و جوی خود را در وب مشاهده کنید.\r\n\r\nآوا:\r\nبا وارد کردن نام خواننده، آهنگ یا آلبوم موردنظر می توانید آهنگ های مرتبط را در وب پیدا کرده و در صورت تمایل، آنها را به صورت آنلاین پخش و یا دانلود کنید.', 20, 30, 50, 100, 30, 'ir.parsijoo'),
(10, 'پرستار همراه', 10, 2, 0000005000, 'پرستار همراه همواره همراه شماست و هر زمانی که به آن نیاز داشته باشید به کمکتان خواهد آمد\r\nدانشنامه گیاهان دارویی، دانشنامه داروها، دانشنامه ی بیماری ها و کمک های اولیه همه در یک برنامه \r\nدر این برنامه اطلاعات جامعی از \r\nگیاهان دارویی ، داروهای شیمیایی همراه با گروه بندی داروها بر اساس مصارف آن ها، بیماری هابه همراه گروه بندی بیماریها بر اساس نوع بیماری ها و کمک های اولیه و هرآنچه هر کس باید بداند، وجود دارد.\r\nدر دو قسمت گیاهان دارویی و داروهای شیمیایی می توانید داروی یا گیاه مورد نظر خود را مورد جستجو قرار دهید.\r\nلازم به ذکر است درمورد جستجوی داروها در صورت نیافتن نتیجه ای برای جستجو به گروه های داروها مراجعه نمایید چرا که ممکن است شما از نام تجاری دارو استفاده کنید، هر چند در برنامه نام های تجاری داروها نیز ذکر شده است.\r\nلطفاً با انتقادات و پیشنهادات سازنده ما را در کامل کردن این مجموعه ی ارزشمند یاری فرمائید', 15, 7, 8, 26, 61, 'eshto.parastari'),
(11, 'پلاک یاب + خلافی و نمره منفی خودرو', 11, 2, 0000500000, 'پلاک یاب + خلافی و نمره منفی خودرو\r\n\r\nگرفتن خلافی ماشین و نمره منفی گواهینامه به راحتی.\r\n\r\nنرم افزار پلاک یاب برای تمامی شهرستان ها و استان ها.\r\nبا بیش از 700000 هزار دانلود\r\n\r\nدوستان نرم افزار رایگان است لطفا ما را برای انجام فعالیت های رایگان ترغیب کنید و با دادن امتیاز 5 ستاره مارو حمایت کنید.حتما نسخه آخر یعنی 1.4.0  رو دانلود کنید.\r\n\r\nاین برنامه رو می توانید به رایگان برای دوستان خود بلوتوث کنید.\r\nبا این نرم افزار شما قادر خواهید بود با وارد کردن کد پلاک خودرو از استان شهر و شهرستان پلاک مورد نظر مطلع شوید فقط کافیست شماره پلاک را وارد کنید تا لیست مناطق شامل آن پلاک ظاهر شود.\r\n\r\nدریافت خلافی خودرو و نمره منفی گواهینامه و همچنین یافتن کوتاه ترین مسیر مسافرت بین دوشهر از طریق این نرمک افزار در دسترس خواهد بود.\r\n\r\nامکانات\r\n\r\n1- جستجو براساس پلاک استان\r\n2- جستجو بر اساس نام استان\r\n3- جستجوی همزمان\r\n4- ظاهر بسیار زیبا و کاربر پسند\r\n4- آخرین تغییرات و همچنین پلاک های رزو\r\n5- جواب دهی در زمان\r\n6- یافتن کوتاه هترین مسیر و مسیر های مسافرتی\r\n7-کدهای خلافی همراه با آخرین نرخ جریمه ها\r\n8- نمره های منفی تخلفات\r\n9-گرفتن خلافی ماشین\r\n10-گرفتن نمره منفی گواهینامه', 10, 20, 30, 300, 200, 'com.blueprogrammer.pelakyab'),
(12, 'پلیس +10', 12, 2, 0000010000, 'یک نرم افزار کامل و فوق العاده برای سهولت در انجام خدمات پلیس\r\n\r\nامکانات قرار داده شده در نرم افزار به شرح زیر است:\r\n\r\nاستعلام صدور اولیه گواهینامه\r\n\r\nاستعلام صدور المثنی گواهینامه\r\n\r\nاستعلام و پیگیری گواهینامه\r\n\r\nاستعلام نمره منفی\r\n\r\nاستعلام کارت هوشمند سوخت\r\n\r\nاستعلام وضعیت مشمولین\r\n\r\nاستعلام وضعیت نظام وظیفه\r\n\r\nشرایط اخذ پلاک المثنی\r\n\r\nمدارک اخذ پلاک المثنی\r\n\r\nمراحل و مدارک معاینه فنی خودرو\r\n\r\nمدارک دریافت کارت هوشمند سوخت\r\n\r\nخرید برچسب طرح ترافیک ویژه تهران\r\n\r\nمدارک مورد نیاز برای تعویض گواهینامه\r\n\r\nمدارک مورد نیاز برای گرفتن گواهینامه المثنی\r\n\r\nمدارک مورد نیاز برای صدور گذرنامه\r\n\r\nصدور گواهی پروانه کسب\r\n\r\nگواهی عدم سو پیشینه\r\n\r\nاطلاعات اقتصادی خانوار\r\n\r\nتوصیه های امنیتی', 0, 0, 0, 0, 0, 'com.milad.ashtari.police'),
(13, 'تقویم فارسی', 13, 2, 0001000000, 'تقویم، مبدل تاریخ و قطب‌نما/قبله‌نمای ساده\r\n\r\n* نوار پایدار اعلان تاریخ از طریق تنظیمات قابل حذف است.\r\n* اوقات شرعی و قبله‌نما با تنظیم شهر در تنظیمات برنامه قابل استفاده است.\r\n* در اندروید ۴ به بالا با فشردن طولانی بر روی روزها می‌توانید یک رویداد به تقویم گوگل در گوشی بیافزایید.', 5, 20, 400, 1000, 900, 'com.byagowi.persiancalendar'),
(14, 'قفل برنامه ها', 14, 2, 0000500000, '●●● برنامه ای بسیار کامل و رایگان برای قفل گذاری روی برنامه ها ●●●تا حالا شده دوست داشته باشی رو برنامه وایبر یا واتس آپ یا سایر برنامه های ارتباطی قفل بزاری؟! تا کسی نتونه فوضولی تو بکنه؟\r\n●●●تا حالا شده نگران این باشی که وقتی گوشیت پیشت نیست کسی نتونه تو برنامه هات سرک بکشه\r\n●●●تا حالا شده چندیت برنامه مهم داشته باشی که دوست نداشته باشی وقتی گوشیت دست خودت نیست کسی نتونه توشون سرک بکشه\r\n●●●تا حالا شده نگران این باشی که کلی پیام و عکس داری که دوست نداری غیر خوذت هیچ کس دیگه ای اونا رو ببینه\r\n●●●این برنامه یک برنامه بسیار ساده و مفید برای شما که بتونید رو هر برنامه ای که دلتون می خواد به راحتی قفل بذارید\r\n●●●هم روی برنامه های وایبر، لاین، واتس اپ و کلی برنامه دیگه\r\n●●●با چند کلیک ساده مانع از فضولی افراد به پیام ها ی برنامه های ارتباطی خودتون بشید\r\n●●●با این برنامه می تونید روی گالری عکس ها ، sms و کلی برنامه مهم دیگه قفل نصب کنید و به راحتی فقط برای خودتون در دسترس قرار دهید\r\n●●●طراحی این برنامه به گونه ای است که بدون کوچکترین پیچیدگی خاصی می تونید برنامه تونو قفل کنید و فقط کافی است رمز عبور رو تعیین کنید و لیست برنامه هایی که دوست دارید قفل بشن رو انتخاب کنید. شما همچنین به سادگی میتونید اونا رو از قفل خارج کنید. و یا رمزتونو تغییر بدین.', 0, 1, 1, 0, 50, 'ir.takro.AppLocker'),
(15, 'قفل صفحه حرفه ای', 15, 2, 0000000010, 'این برنامه قفل صفحه حرفه ای برای گوشی ایجاد میکند . برای باز کردن صفحه آیکن قفل را به  سمت پایین گوشی بکشید و برای  سایر عملکردهای گوشی هم  ، آیکن مربوطه رو به انتها بکشید تا ضمن باز شدن صفحه به  بخش مورد نظر  بروید.', 0, 1, 21, 21, 0, 'com.parastodev.proflock'),
(16, 'هواشناسی', 16, 2, 0000020000, 'با استفاده از این نرم افزار که توسط سازمان هواشناسی کشور عرضه شده است می توانید از وضعیت آب و هوای شهرهای ایران با خبر شوید. این نرم افزار نیاز به اتصال به شبکه اینترنت دارد که اگر شهری در لیست علاقه مندی های شما ذخیره گردد می توانید بدون اتصال به اینترنت و از طریق پیام کوتاه از وضعیت آب و هوا مطلع شوید.\r\nهمچنین در منوی برنامه گزینه ای تحت عنوان هشدارها وجود دارد در آن می توان تمامی هشدارهای اعلام شده توسط سازمان هواشناسی کشور را مشاهده نمود.', 0, 70, 101, 102, 0, 'com.example.weather.irimoweather'),
(100, 'لوسيون سی ام', 30, 3, 0000065000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 10, 20, 30, 10, 2, '100.com'),
(101, 'کرم درماتين', 30, 3, 0000055000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 1, 2, 3, 4, 2, '101.com'),
(102, 'قطره خوراکي دپروهرب', 30, 3, 0000078000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 5, 2, 46, 6, 2, '102.com'),
(103, 'قرص اورتيدين', 30, 3, 0000080000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 20, 30, 40, 22, 10, '103.com'),
(104, 'کرم لینودرم', 30, 3, 0000072000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 10, 20, 20, 20, 20, '104.com'),
(105, 'کپسول نرم سوپر مینت', 30, 3, 0000070000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 10, 101, 200, 2, 30, '105.com'),
(106, 'قرص نتونال باريج', 30, 3, 0000075000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 1, 2, 3, 4, 5, '106.com'),
(107, 'کرم موضعی افتر بایت باریج', 30, 3, 0000040000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 5, 4, 4, 4, 4, '107.com'),
(108, 'شربت بنفشه', 30, 3, 0000070000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 5, 4, 3, 2, 1, '108.com'),
(109, 'کپسول نرم روغن بزرک', 30, 3, 0000180000, 'شکل دارويي:\nقطره 15 ميلي ليتري داراي قطره چکان در جعبه مقوايي با بروشور\nموارد مصرف:\nتسکين درد اوستئوآرتريت زانو \nتسکين دردهاي عضلاني اسکلتي\nکشيدگي تاندوني\nگرفتگي عضلاني\nاجزاء فراورده:\nاسانس کرفس (Apium graveolens) و اسانس نعنا (Mentha spicata)\nاستاندارد شده:\nبر اساس وجود حداقل 55 ميلي گرم (-) کاروون و حداقل54 ميلي گرم (+) ليمونن در هر ميلي ليتر فرآورده\nمواد مؤثره:\nمنتول، منتون، ليمونن، کاروون\nآثار فارماکولوژيک و مکانيسم اثر:\nاوستئوآرتريت شايع‌ترين بيماري مفصلي در سراسر جهان است. برخي از عوامل مستعدکننده ابتلا به اين بيماري عبارتند از: سن، سابقه ضربه و چاقي. شکايات بيمار معمولاً درد، سفتي مفصل، خشکي صبحگاهي و محدوديت حرکت است. براي درمان هر فرد مبتلا به اوستئوآرتريت بايد جداگانه تصميم گرفت. درمان شامل روش‌هاي غير دارويي ( مانند جلسات آموزشي، برنامه‌هاي ورزشي براي حفظ دامنه حرکت و قدرت عضلاني، استفاده از وسايل کمکي، کنترل وزن و مکمل‌هاي غذايي)، روش‌هاي دارويي ( مانند مسکن‌هاي موضعي و خوراکي) و اقدامات جراحي است.\nمنتول از جمله مواد مؤثره نعنا است که اثرات تحريک سطحي(counter - irritant) و ضد درد موضعي آن کاملاً پذيرفته شده است. هنگامي که اسانس نعنا يا منتول روي پوست ماليده مي‌شوند، بطور همزمان اعصاب ويژه درک حس سرما را تحريک و اعصاب ويژه درک حس درد را سرکوب مي‌کنند.(1)\nبر اساس نتايج حاصل از مطالعات انجام شده در حيوانات، منتول با فعال کردن سيستم اوپيوئيد درونزاد و يا تا حدودي با اثر بي‌حس‌ کننده موضعي بدون داشتن خواص ضدالتهابي، اثرات ضد درد را ايجاد مي‌کند. همچنين اسانس نعنا انقباضات عضلاني ايجاد شده توسط سروتونين و ماده P را مهار مي‌کند.(2)\nبر اساس نتايج مطالعات انجام شده در حيوانات؛ اسانس کرفس داراي اثرات ضدالتهاب، ضد اسپاسم و آرامبخش است.(3) اسانس نعنا داراي اثرات ضدالتهاب و آنتي اسپاسم است.(4)\nدر بررسي اثرات ضد درد و ضدالتهاب اسانس نعنا و اسانس کرفس و مخلوط آنها در رت و موش سوري مشخص شد که در تست کاراژينان؛ اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات ضدالتهاب موضعي قابل ملاحظه‌اي دارند. اسانس نعنا و مخلوط اسانس‌هاي  نعنا _کرفس بطور معني داري سبب مهار درد در فاز اول تست فرمالين شدند که يک درد نوروژنيک است و در اثر تحريک مستقيم اعصاب درد ايجاد مي‌شود. همچنين اسانس نعنا، اسانس کرفس و مخلوط اين دو اسانس اثرات مهاري معني‌داري روي درد فاز دوم تست فرمالين که يک درد التهابي محسوب مي‌شود نشان دادند.(5)', 10, 10, 11, 10, 10, '109.com');

-- 
-- Dumping data for table tblupdatedappcomment
--
INSERT INTO tblupdatedappcomment VALUES
(1, 1, 1, False, 'بد نبود', NULL),
(2, 1, 2, False, 'خوب بود', '1394/01/02'),
(3, 1, 3, False, 'عااالی', '13940801'),
(4, 1, 6, False, 'اینم کامنت', NULL),
(5, 1, 6, False, 'fsd', '1231dfsf'),
(6, 1, 6, False, 'fsd', '1231'),
(7, 1, 6, False, 'fsd', '1231dfsf'),
(8, 12, 6, False, 'fsdsdfsdfsdf', '1231dfsf'),
(9, 12, 6, False, 'fsdsdfsdfsdf', '1231dfsf'),
(10, 2, 6, False, 'fsdsdfsdfsdf', '1231dfsf'),
(11, 2, 6, False, 'fsdsdfsdfsdf', '1231dfsf'),
(12, 16, 61, False, '???', '1394/08/'),
(13, 16, 61, False, '???', '1394/08/'),
(14, 16, 62, False, 'hgghjgff', '1394/08/'),
(15, 16, 62, False, '????? ??', '1394/08/'),
(16, 16, 62, False, '?????', '1394/08/'),
(17, 1, 6, False, 'یشسیشسی', '1231'),
(18, 1, 6, False, 'کباب', '21'),
(19, 16, 62, False, 'سلان', '1394/08/'),
(20, 1, 62, False, 'سلام', '1394/08/'),
(21, 14, 63, False, 'بسیار عالی', '1394/08/'),
(22, 1, 64, False, 'نالبل', '1394/08/'),
(23, 4, 62, False, '', '1394/08/'),
(24, 1, 6, False, 'خیلی خوب بود', '1394/08/08'),
(25, 15, 62, False, 'بسیار خوب', '1394/08/29'),
(26, 1, 6, False, 'nadarad', '1392/12/21'),
(27, 16, 62, False, 'uh', '1394/09/09'),
(28, 109, 62, False, 'عالی بود', '1394/09/16'),
(29, 109, 62, False, 'چگونه میتوانم سفارش بدهم؟', '1394/09/16'),
(30, 109, 62, False, 'بعضی داروخانه ها این محصول را ندارند! ', '1394/09/16');

-- 
-- Dumping data for table tblupdatedappgroup
--
INSERT INTO tblupdatedappgroup VALUES
(1, 1),
(2, 1),
(3, 1),
(4, 1),
(5, 1),
(6, 1),
(7, 1),
(8, 1),
(9, 1),
(10, 1),
(11, 1),
(12, 1),
(13, 1),
(14, 1),
(15, 1),
(16, 1),
(100, 1),
(101, 1),
(102, 1),
(103, 1),
(104, 1),
(105, 1),
(106, 1),
(107, 1),
(108, 1),
(109, 1);

-- 
-- Dumping data for table tblupdatedapprate
--
INSERT INTO tblupdatedapprate VALUES
(1, 1, 6, 5),
(2, 16, 61, 3),
(3, 16, 62, 4),
(4, 15, 63, 3),
(5, 14, 63, 3),
(6, 14, 62, 2),
(7, 1, 62, 3),
(8, 1, 64, 4),
(9, 15, 62, 2),
(10, 4, 62, 2),
(11, 12, 62, 0),
(12, 109, 62, 3);

-- 
-- Dumping data for table tbluser
--
INSERT INTO tbluser VALUES
(1, 'nasser', 'nasser1245@gmail.com', '$2y$11$wOk7A4z6Z5sfBq4DzBuvHuWVwr4owRltMVIGiFHROpDvp.Nok1dYS', 'M', '1394/03/04', 'u1', NULL),
(2, 'رضا', 'ahmad@ff.com', '234567', 'M', '13930307', 'u2', NULL),
(3, 'nass', 'nov', '$2y$12$PzmifthqfZ7gN2v55K8gw.p9Uc7mLFv5utlofhATuJcBUR0TfE5KG', 'F', '13931122', 'u3', 'rez'),
(4, 'sajede', 'sajede@gmail.com', '456789', 'M', '13931214', 'u4', NULL),
(5, 'FREE-User', NULL, '$2y$10$XkiP1X7rB6shVziKrcE7wuHQt9MDl.kKTB262jBSTf8ef5hrNz61y', 'F', '13940602', 'FREE', NULL),
(6, 'رضا', 'nadarad', '$2y$12$CMfH4A04F3EMflHfGhNzf.saTNTdPQQkIMlqW0xbRsEnLKYW/qdNC', 'M', '13931111', 'admin', '0211'),
(26, 'sfdv', 'fbfdbs@hrghr.com', '$2y$10$xynRfch6EZWWrAvi3h.kXueVKX7irZGwo6KqGIT25CXVHgzeh.z1S', 'F', '1232342', 'fre', NULL),
(27, 'adsa', 'safdas', '$2y$10$gUzmMTynUGVQOxarrzIbV.JXsAIyMdwDejapyxLpSmxyNWkedXxQ6', 's', 'sdfas', 'asdfas', NULL),
(34, 'fgbbf', 'dgbfbgd@dggr.com', '$2y$12$iTghUvVSpy2GcoZ/4PCw1OzWXPlHAPYexpC1AlkF3iw9OYDG0BEca', 'w', '1234234', 'ewvawres', NULL),
(41, 'fgbbf', 'ererew', '$2y$12$WIrz7os61wgIjLlzatpG7..7hfH3dLWsRe6FPVu2TpbuZrx4.iuT2', 'w', '1234we23', 'ewvawewres', NULL),
(42, 'fgbbf', '', '$2y$12$B911BmAeb.m/.renj20jpuRNUbx/9PAov4YALbncPMBu6ax/knJjq', 'w', '1234we23', 'ewvawewresr', NULL),
(43, 'fgbbf', 'safdas', '$2y$12$twB5m/2ddNTNToOYilUfouravIW8djaQGQCTOrwBQ.e96YWQdq3fq', 'w', '1234234', 'nasser', NULL),
(44, 'fgbbf', 'safdas', '$2y$12$u/rRZmnkTubDBiCAeuI73eQqG3Ad5c6Tv6wMsKnLh6BsyFkKHhWfy', 'w', '1234234', 'nasfser', NULL),
(45, 'sdf', 'ssadf', '$2y$12$0Tix6aKr0L2pcnRBs9u/I.L5YSccxM2F2nfTF8oWv3syBItD9.Y8S', '2', '1234321', 'yasser', NULL),
(46, 'aasd', 'sadf', '$2y$12$Mb.ii1owlBKnyLptGK548OLHySADzqlxuEKKmi7BxlGX3rW0Brtpe', 'F', '2343', '234', NULL),
(47, '', '', '$2y$12$DuGWeWTZjTTFfa0iJu7jEecCrNw6gBlGq0PWJOrVoQrebF5DMNoiC', '', '', 'xxx', NULL),
(48, '', '', '$2y$12$ECqYIbx7C09Erqv40C9Wnunus7M0a6tgDRsDZDn37aDbg6dgMmlFK', '', '', 'ads', NULL),
(54, '', '', '$2y$12$O7w2.6Tf/u0JDGwULQZ8euR.3.NOAbvvSu03MuedaUJkfiJWC2QAi', '', '', 'adm', ''),
(55, '', '', '$2y$12$DXy99gFa0T8b9szkgZGrB.VlQoSKDMXqhhXXTNou4VZYxjx0pORyu', 'M', NULL, 'h', ''),
(56, '', '', '$2y$12$Ztnpnwyse9OjGJx44syjoujxi3yhAomTpT75S99ejCxcQAsqqnCtS', 'M', NULL, 'k', ''),
(57, '', '', '$2y$12$nKnPrU11rF9kUvJKqa5pieJNSPRvY9gY8I7WBduMiMzFtrhO2qzI6', 'M', NULL, 'j', ''),
(58, '', '', '$2y$12$Q34PLE5tjIO.AN1JCQW35u1Ngm0tPu494EbFu8ITHspNjH9W4OHoW', 'M', NULL, 'l', ''),
(59, '', '', '$2y$12$FO6RwtW7Xpfzq4cePYeCPuY01aqt75urDMQajqgGTKyQNIYx7pY36', 'M', NULL, 'u', ''),
(60, '', '', '$2y$12$68jBP51hJsEWiRl2Nbt3Ouh.wj6b73cIPLp/cUV.SyP13YDmS4jyy', 'M', NULL, 'i', ''),
(61, '', '', '$2y$12$vaSmAR9B6d1Axwobu4V8ruGcjtnv3/BXvuQDNtVNPCeOJgNlwi/Fm', 'M', NULL, 'r', ''),
(62, 'حسین حسینی', 'f@j.com', '$2y$12$d33zZMBohNRlCcRoT9U7M.z7mkohuc/pZfc9Xt8LBrYnCXj385CR.', 'M', NULL, 'f', '0939656546'),
(63, 'فاطمه', 'fateme_entezarian@yahoo.com', '$2y$12$cSh.oULtFNGnqI29OdPa/uulGtWuP7.dCpkob3/O26ieXl1T6D2iO', 'M', NULL, '?????', '09132779371'),
(64, '', '', '$2y$12$PTKVMDCnZSFqmLjDK76P7..F1h6f.Lo1e808jATYsOIa5o8HuZGre', 'M', NULL, '  ?h', '');

-- 
-- Dumping data for table tblusergroup
--
INSERT INTO tblusergroup VALUES
(1, 1),
(3, 1),
(6, 1),
(61, 1),
(62, 1),
(63, 1),
(64, 1),
(4, 2),
(2, 3),
(1, 4),
(2, 4),
(3, 4),
(26, 4),
(27, 4),
(34, 4),
(41, 4),
(42, 4),
(43, 4),
(44, 4),
(45, 4),
(46, 4),
(47, 4),
(48, 4),
(54, 4),
(55, 4),
(56, 4),
(57, 4),
(58, 4),
(59, 4),
(60, 4),
(5, 5);

-- 
-- Dumping data for table tblversion
--
INSERT INTO tblversion VALUES
(1, 1, '1.4', '1.7 MB', NULL, NULL, 'amin.estekhareh.ir.png', 'amin.estekhareh.ir', False, 1),
(2, 2, '2.2', '1.2 MB', NULL, NULL, 'co.sharang.bartarinha.png', 'co.sharang.bartarinha', True, 1),
(3, 3, '2.3', '1.9 MB', NULL, NULL, 'ir.onedot.dream.png', 'ir.onedot.dream', True, 1),
(4, 4, '1.38', '1.5 MB', NULL, NULL, 'com.iust.jadval.png', 'com.iust.jadval', False, 1),
(5, 5, '1.1', '828 KB', NULL, NULL, 'com.TarzTahieMoraba.png', 'com.TarzTahieMoraba', True, 1),
(6, 6, '1', '1.83 MB', NULL, NULL, 'ir.plussoft.asheghanehasms.png', 'ir.plussoft.asheghanehasms', True, 1),
(7, 7, '1.6', '821 KB', NULL, NULL, 'com.shalamrood.faleanbia.png', 'com.shalamrood.faleanbia', True, 1),
(8, 8, '1.1', '1.7 MB', NULL, NULL, 'com.NejatZendegiZanashoie.png', 'com.NejatZendegiZanashoie', True, 1),
(9, 9, '1.2', '2.2 MB', NULL, NULL, 'ir.parsijoo.png', 'ir.parsijoo', True, 1),
(10, 10, '1.3', '1.11 MB', NULL, NULL, 'vira.chista.nurse.png', 'eshto.parastari', True, 1),
(11, 11, '1.4', '1.27 MB', NULL, NULL, 'com.blueprogrammer.pelakyab.png', 'com.blueprogrammer.pelakyab', True, 1),
(12, 12, '2.2', '4.24 MB', NULL, NULL, 'com.milad.ashtari.police.png', 'com.milad.ashtari.police', True, 1),
(13, 13, '4.1.1', '467 KB', NULL, NULL, 'com.byagowi.persiancalendar.png', 'com.byagowi.persiancalendar', True, 1),
(14, 14, '1.6', '1.23 MB', NULL, NULL, 'ir.takro.AppLocker.png', 'ir.takro.AppLocker', True, 1),
(15, 15, '1.1', '594 KB', NULL, NULL, 'com.parastodev.proflock.png', 'com.parastodev.proflock', True, 1),
(16, 16, '1.1', '1.17 MB', NULL, NULL, 'com.example.weather.irimoweather.png', 'com.example.weather.irimoweather', True, 1),
(17, 1, '1.5', '1.67 MB', NULL, NULL, 'amin.estekhareh.ir.png', 'amin.estekhareh.ir', True, 1),
(18, 4, '2', '1.46 MB', NULL, NULL, 'com.iust.jadval.png', 'com.iust.jadval', True, 1),
(100, 100, '1228046810', '1228046810', NULL, NULL, '100.png', '100.com', True, 1),
(101, 101, '1228046810', '1228046810', NULL, NULL, '101.png', '101.com', True, 1),
(102, 102, '1228046810', '1228046810', NULL, NULL, '102.png', '102.com', True, 4),
(103, 103, '1228046810', '1228046810', NULL, NULL, '103.png', '103.com', True, 4),
(104, 104, '1228046810', '1228046810', NULL, NULL, '104.png', '104.com', True, 1),
(105, 105, '1228046810', '1228046810', NULL, NULL, '105.png', '105.com', True, 0),
(106, 106, '1228046810', '1228046810', NULL, NULL, '106.png', '106.com', True, 4),
(107, 107, '1228046810', '1228046810', NULL, NULL, '107.png', '107.com', True, 4),
(108, 108, '1228046810', '1228046810', NULL, NULL, '108.png', '108.com', True, 1),
(109, 109, '1228046810', '1228046810', NULL, NULL, '109.png', '109.com', True, 4);

-- 
-- Dumping data for table tblversionaccess
--
INSERT INTO tblversionaccess VALUES
(1, 1),
(2, 1),
(5, 1),
(7, 1),
(9, 1),
(12, 1),
(13, 1),
(15, 1),
(16, 1),
(17, 1),
(100, 1),
(101, 1),
(102, 1),
(103, 1),
(104, 1),
(105, 1),
(106, 1),
(107, 1),
(108, 1),
(109, 1),
(1, 2),
(4, 2),
(5, 2),
(6, 2),
(7, 2),
(9, 2),
(10, 2),
(14, 2),
(4, 3),
(7, 3),
(8, 3),
(9, 3),
(10, 3),
(13, 3),
(17, 3),
(18, 3),
(2, 4),
(9, 4),
(10, 4),
(11, 4),
(12, 4),
(13, 4),
(18, 4),
(1, 5),
(4, 5),
(5, 5),
(8, 5),
(9, 5),
(11, 5),
(12, 5),
(13, 5),
(14, 5),
(15, 5),
(16, 5),
(17, 5),
(3, 6),
(6, 6),
(8, 6),
(13, 6),
(14, 6),
(18, 6),
(2, 7),
(4, 7),
(6, 7),
(8, 7),
(9, 7),
(11, 7),
(14, 7),
(15, 7),
(17, 7),
(2, 8),
(3, 8),
(6, 8),
(7, 8),
(16, 8);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
